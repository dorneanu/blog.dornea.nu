<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>appsec on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/appsec/</link>
    <description>Recent content in appsec on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Oct 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/appsec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fuzzing the hell out of conntrack tools</title>
      <link>http://blog.dornea.nu/2016/10/28/fuzzing-the-hell-out-of-conntrack-tools/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/10/28/fuzzing-the-hell-out-of-conntrack-tools/</guid>
      <description>Fuzzing is nowadays the attack technique used by a lot of pentesters and security researchers. Whether you&amp;rsquo;re looking for vulnerabilities in media files (pictures, videos, audio stuff) or just binary files, fuzzing is the right approach if you don&amp;rsquo;t want to do some static code analysis or debug the hell out of your targets.
When it comes to fuzzing there are a few tools to mention that have established during the last years.</description>
    </item>
    
    <item>
      <title>Automatic file uploads</title>
      <link>http://blog.dornea.nu/2016/08/26/automatic-file-uploads/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/08/26/automatic-file-uploads/</guid>
      <description>Uploading files in web applications iw nowadays a common feature. Being able to automate this steps using Burp, Curl, Python &amp;amp; Co. doesn&amp;rsquo;t seem to be an easy task. Basically the automation involves following steps:
 for a given directory of files, repeat the request for each file have a look for the status responses to detect anomalies  In Burp you&amp;rsquo;re allowed to copy a certain request as curl command which simplifies things.</description>
    </item>
    
    <item>
      <title>TLS Client authentication using Bitnami Nginx stack</title>
      <link>http://blog.dornea.nu/2016/02/18/tls-client-authentication-using-bitnami-nginx-stack/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/02/18/tls-client-authentication-using-bitnami-nginx-stack/</guid>
      <description>I&amp;rsquo;ve felt that I have to write it down since it took almost 2 days to find the root cause of:
[info] 30979#0: *2 client SSL certificate verify error: (18:self signed certificate) while reading client request headers, client: xxx, server: yyy, request: &amp;#34;GET / HTTP/1.1&amp;#34;, host: &amp;#34;yyy&amp;#34; Use nginx stack environment Not generating the certificates inside the Bitnami environment was the root cause - at least I think it is. In your Bitnami installation folder (remember the instructions here) you&amp;rsquo;ll find a small script called use_nginxstack:</description>
    </item>
    
    <item>
      <title>Some words on CSRF and cookies</title>
      <link>http://blog.dornea.nu/2016/01/26/some-words-on-csrf-and-cookies/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/01/26/some-words-on-csrf-and-cookies/</guid>
      <description>Being involved in different projects where web technologies are used, I have to make sure that AppSec related security nightmares are avoided. One of those security nightmare - and in my own oppinion the most complicated one to explain to a non-sec person - is CSRF. I won&amp;rsquo;t go into details since these are freely available. Furthermore I would like to focus on the countermeasures one would implement to prevent CSRF.</description>
    </item>
    
    <item>
      <title>Debugging Android native shared libraries</title>
      <link>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</guid>
      <description>Since I haven&amp;rsquo;t done this before, I thought I could share some experiences with you. All this began during some APK analysis which was heavily using JNIs. In my particular case Java Native Interfaces were used to call functions inside libraries written in C/C++. At that time I was quite unfamiliar with JNIs and how they actually work. Besides that I haven&amp;rsquo;t debugged any native applications/libraries on Android before. So this was the perfect opportunity to have a closer look at Android NDK and its debugging features.</description>
    </item>
    
    <item>
      <title>Validating and pinning X.509 certificates</title>
      <link>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</guid>
      <description>In times of NSA, surveillance and data privacy, protecting your data has become an essential part of your every day life. A good understanding of basic principles is half the battle. In this post I just wanted to have look at SSL/TLS from a developer point of view but also from an users one. On the one hand I wanted to use openssl as a CLI utility to inspect and validate X.</description>
    </item>
    
    <item>
      <title>2014 - Personal review</title>
      <link>http://blog.dornea.nu/2014/12/22/2014-personal-review/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/22/2014-personal-review/</guid>
      <description>Well, where should I start? Looking back at my blog archives I&amp;rsquo;ve realized 2014 &amp;ldquo;year of the mobile apps&amp;rdquo; - at least for me. I was heavily involved in analyzing mobile applications: Android and iOS. For the first time in my whole infosec career path I was disassembling iOS applications and doing stuff (binary analysis) I was used to (some years ago). Besides doing a lot of mobile apps analysis, I was pretty much involved in structuring and hacking data.</description>
    </item>
    
    <item>
      <title>HowTo: Proxy Non-Proxy-Aware Android Applications through Burp</title>
      <link>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</guid>
      <description>Proxying HTTP(s) traffic from Android devices through Burp should be actually no magic. Nevertheless you&amp;rsquo;ll have to take some important steps into consideration:
  Install Burps CA cert on the device
 I usually access Burp directly and download the cert file (cacert.crt) If Burp is listening on 192.168.1.1:8080, just go to http://192.168.1.1:8080/cert to download the cert Push this file to your device and install the certificate    Install ProxyDroid on Android</description>
    </item>
    
    <item>
      <title>HowTo: iOS Apps - Static analysis</title>
      <link>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</guid>
      <description>In this short article I&amp;rsquo;ll try to explain what are the main steps to analyze an iOS app. Since I&amp;rsquo;ve writen similar posts related to Android I thought I could devote some of spare time writing about the steps required to analyze iOS apps/binaries. But first of all let&amp;rsquo;s start with:
What&amp;rsquo;s an iOS app? In a nutshell here are the main characteristics:
 Objective-C / C / C++ compiled (ARM) executable mostly encrypted using Apple&amp;rsquo;s Fairplay DRM it runs in a sandbox it&amp;rsquo;s installed by the user mobile apps come as an IPA file which is the counterpart to Android&amp;rsquo;s APK  Now that you roughly know what an iOS app is let&amp;rsquo;s have a look at the most common blackbox pentesting tools out there.</description>
    </item>
    
    <item>
      <title>HowTo: Androguard with Docker</title>
      <link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid>
      <description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description>
    </item>
    
    <item>
      <title>HowTo: Debug Android APKs with Eclipse and DDMS</title>
      <link>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</guid>
      <description>Simply out of necessity I&amp;rsquo;ve written this mini-tutorial how debug android APKs using Eclipse and DDMS. After hours of wild googling these are the steps to make your APK debuggable under Eclipse. I&amp;rsquo;ll be using the FakeBanker APK reverse-engineered in previous articles.
Revisions  UPDATE 2014-12-09:  Before looking at the next steps, make sure you&amp;rsquo;ll have a look at ADUS. It will help you with the automation of several steps described in this post.</description>
    </item>
    
    <item>
      <title>Web Application Survey Tutorial</title>
      <link>http://blog.dornea.nu/2014/08/06/web-application-survey-tutorial/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/06/web-application-survey-tutorial/</guid>
      <description>Suppose you get a list of some URLs and you are asked to &amp;ldquo;investigate&amp;rdquo; them. The list is full of some random URLs related to your company and nobody knows about. You don&amp;rsquo;t have a clue who is responsible for them nor which applications (if any) are running behind them. Sounds like a cool task, ugh?
Well in today&amp;rsquo;s post I&amp;rsquo;ll show you how I&amp;rsquo;ve managed it to minimize the process of analyzing each URL manually and saved me a lot of time automatizing things.</description>
    </item>
    
    <item>
      <title>Android Dynamic Code Analysis - Mastering DroidBox</title>
      <link>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</guid>
      <description>In this article I&amp;rsquo;ll have a a closer look at DroidBox which provides a mobile sandbox to look at Android applications. In the previous post I&amp;rsquo;ve dealt with static code analysis. This time will start running our malicious application and look at the &amp;ldquo;noise&amp;rdquo; it generates. That would be:
 file system access network activity interaction with the operating system interaction with other applications etc.  DroidBox is very easy to use and consists of an own system image and kernel meant to log one applications activities.</description>
    </item>
    
    <item>
      <title>Disect Android APKs like a Pro - Static code analysis</title>
      <link>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</guid>
      <description>I&amp;rsquo;ve started writing this IPython notebook in order to make myself more comfortable with Android and its SDK. Due to some personal interests I thought I could also have a look at the available RE tools and learn more about their pros &amp;amp; cos. In particular I had a closer look at AndroGuard which seems to be good at:
 Reverse engineering, Malware and goodware analysis of Android applications &amp;hellip; and more (ninja !</description>
    </item>
    
    <item>
      <title>Links of the Week #27</title>
      <link>http://blog.dornea.nu/2014/02/14/links-of-the-week-#27/</link>
      <pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/02/14/links-of-the-week-#27/</guid>
      <description>  When Random Isn’t Random Enough: Lessons from an Online Poker Exploit
  Technical Details Behind a 400Gbps NTP Amplification DDoS Attack
  Absolute Computatrace revisited
  Burp Co2
  Porting Applications to 64bit ARM
  Price and Feature Comparison of Web Application Scanners
  GoLismero 2.0 Beta 3
  vulnhub.com
  faces.io
  </description>
    </item>
    
    <item>
      <title>Links of the Week #24</title>
      <link>http://blog.dornea.nu/2014/01/24/links-of-the-week-#24/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/24/links-of-the-week-#24/</guid>
      <description>Suterusu Rootkit: Inline Kernel Function Hooking on x86 and ARM
  Oldboot: the first bootkit on Android
  For the Love of Money
    TCP backdoor 32764 or how we could patch the Internet (or part of it ;))   2013 Cyber Attacks Statistics (Summary)
  Decebal: Point-of-Sale Malware - 400 lines of VBScript code from Romania, Researchers warns about evolution of threats and interests to modern retailers</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</guid>
      <description>For better display results you can also have a look at the 24h Android Monitoring Jupyter Notebook.
 Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is ending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long.</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump - IPython Notebook Version</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</guid>
      <description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is sending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description>
    </item>
    
    <item>
      <title>Links of the Week #23</title>
      <link>http://blog.dornea.nu/2014/01/17/links-of-the-week-#23/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/17/links-of-the-week-#23/</guid>
      <description>InkTag: Secure Applications on an Untrusted Operating System
  Unicode Security Guide
  Hunting Botnets with ZMap
  EncFS Security Audit
  Hacking Tools Repository
  The Hacker Who Cracked the Code in Iron Man and The Social Network
  Operating System Tutorials
  The Jobless Ph.D. Generation
  The Holy Book of Passwords by Aram Bartholl
  Reconstructing the Cryptanalytic Attack behind the Flame Malware</description>
    </item>
    
    <item>
      <title>Links of the Week #20</title>
      <link>http://blog.dornea.nu/2013/12/06/links-of-the-week-#20/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/12/06/links-of-the-week-#20/</guid>
      <description> Android Root Detection Techniques Shmoocon 2013 Playlist INSECURE Mag 40 A society of phone Zombies Encrypted peer-to-peer web application platform for decentralized, privacy-preserving applications The UNIX system family tree: Research and BSD Found: Hacker server storing two million pilfered passwords Burp/Zap plugin: generator script  </description>
    </item>
    
    <item>
      <title>HowTo: Automate Burp using Burp Extender API</title>
      <link>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</guid>
      <description>I really love Burp. Since I use it on a daily basis I thought there might be some way to automate it. Usually I mainly do these steps to scan some URL:
 Define scope Start manual exploring OR spider the URL in order to get some target map Activate passive scanning Activate live scanning Wait to the scan to finish Have a look at the results Save/export the results  Well these are a lot of steps which have to be done manually.</description>
    </item>
    
    <item>
      <title>Links of the Week #2</title>
      <link>http://blog.dornea.nu/2013/05/24/links-of-the-week-#2/</link>
      <pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/05/24/links-of-the-week-#2/</guid>
      <description>First Glimpse into the Soul of Tamagotchi: Remember my post about 29C3? There I&amp;rsquo;ve first mentioned Natalie and her passion for Tamagotchis. She&amp;rsquo;s doing some progress! Obvisouly! I really like the screenshots. CVE-2013-2094: This is definitely the bug of the week! Have a closer detailed look here. The exploit was ported to x86. Interview with a BlackHat: Part 1, Part 2, Part 3 Your login form posts to HTTPS, but you blew it when you loaded it over HTTP: I can&amp;rsquo;t believe this is still a issue.</description>
    </item>
    
    <item>
      <title>Hacking Altoro Mutual</title>
      <link>http://blog.dornea.nu/2013/05/06/hacking-altoro-mutual/</link>
      <pubDate>Mon, 06 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/05/06/hacking-altoro-mutual/</guid>
      <description>Introduction AltoroMutual is an vulnerable-by-design web application created by WatchFire (now AppScan Standard) as a demo test application for their BlackBox Scanner. (Source:https://www.owasp.org/index.php/AltoroMutual)
The demo can be found at http://demo.testfire.net/.
Vulnerabilities /default.aspx?content= There is a file inclusion vulnerability which we&amp;rsquo;ll use for further investigation. URL http://demo.testfire.net/default.aspx?content=../testing.txt will show:
An Error Has Occurred Summary: Could not find file &amp;#39;D:downloadsAltoroMutual_v6website esting.txt&amp;#39;. Error Message: System.IO.FileNotFoundException: Could not find file &amp;#39;D:downloadsAltoroMutual_v6website esting.txt&amp;#39;. File name: &amp;#39;D:downloadsAltoroMutual_v6website esting.</description>
    </item>
    
    <item>
      <title>OverTheWire: Vortex Level1</title>
      <link>http://blog.dornea.nu/2013/05/03/overthewire-vortex-level1/</link>
      <pubDate>Fri, 03 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/05/03/overthewire-vortex-level1/</guid>
      <description>Solution for http://www.overthewire.org/wargames/vortex/vortex1.shtml. Here&amp;rsquo;s the code they have used:
#include #include #include #include #define e(); if(((unsigned int)ptr &amp;amp; 0xff000000)==0xca000000) { setresuid(geteuid(), geteuid(), geteuid()); execlp(&amp;#34;/bin/sh&amp;#34;, &amp;#34;sh&amp;#34;, &amp;#34;-i&amp;#34;, NULL); }  void print(unsigned char *buf, int len) { int i; printf(&amp;#34;[ &amp;#34;); for(i=0; i &amp;lt; len; i++) printf(&amp;#34;%x &amp;#34;, buf[i]); printf(&amp;#34; ]\n&amp;#34;); } int main() { unsigned char buf[512]; unsigned char *ptr = buf + (sizeof(buf)/2); unsigned int x; while((x = getchar()) !</description>
    </item>
    
    <item>
      <title>OverTheWire: Vortex Level2</title>
      <link>http://blog.dornea.nu/2013/05/02/overthewire-vortex-level2/</link>
      <pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/05/02/overthewire-vortex-level2/</guid>
      <description>Solution for level2:
Here is the code:
#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt; int main(int argc, char **argv) { char *args[] = { &amp;#34;/bin/tar&amp;#34;, &amp;#34;cf&amp;#34;, &amp;#34;/tmp/ownership.$$.tar&amp;#34;, argv[1], argv[2], argv[3] }; execv(args[0], args); } $$ expands to the process ID of the shell.
$ echo $$ 24489 Let&amp;rsquo;s make some observations:
vortex2@melissa:~$ ls -l /etc/vortex_pass/vortex3 -r-------- 1 vortex3 vortex3 10 2011-11-14 18:15 /etc/vortex_pass/vortex3 vortex2@melissa:~$ ls -l /vortex/vortex2 -r-sr-x--- 1 vortex3 vortex2 7134 2011-11-13 23:07 /vortex/vortex2 The password file is owned by vortex3.</description>
    </item>
    
  </channel>
</rss>
