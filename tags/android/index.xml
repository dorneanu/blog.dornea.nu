<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/android/</link>
    <description>Recent content in android on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Oct 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hack.lu conference 2016</title>
      <link>http://blog.dornea.nu/2016/10/21/hack.lu-conference-2016/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/10/21/hack.lu-conference-2016/</guid>
      <description>This year I&amp;rsquo;ve attended the hack.lu conference in Luxembourg. Being actually for the first time there, I&amp;rsquo;ve had absolutely no expectations. In fact it was a really lovelly and warm athmosphere during the whole conference and I&amp;rsquo;ve met a lot of interesting persons.
Talks I think there were some realy good talks. Unfortunately I&amp;rsquo;ve seen only 1 because most of the time I was at the workshops practicing my reverse engineering skills.</description>
    </item>
    
    <item>
      <title>Debugging Android native shared libraries</title>
      <link>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</guid>
      <description>Since I haven&amp;rsquo;t done this before, I thought I could share some experiences with you. All this began during some APK analysis which was heavily using JNIs. In my particular case Java Native Interfaces were used to call functions inside libraries written in C/C++. At that time I was quite unfamiliar with JNIs and how they actually work. Besides that I haven&amp;rsquo;t debugged any native applications/libraries on Android before. So this was the perfect opportunity to have a closer look at Android NDK and its debugging features.</description>
    </item>
    
    <item>
      <title>usd AG Hacker challenge 2015 - Solutions</title>
      <link>http://blog.dornea.nu/2015/03/18/usd-ag-hacker-challenge-2015-solutions/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/03/18/usd-ag-hacker-challenge-2015-solutions/</guid>
      <description>usd AG has announced a hacking challenge I have participated at. The target system was available at http://82.195.79.41/. Now let me sum up thg steps that have been required in order to get all 6 tokens.
# &amp;lt;!-- collapse=True --&amp;gt; import pandas as pd import sqlite3 import binascii Scratch the surface Let&amp;rsquo;s first conduct a nmap scan to see which ports are open.
%%bash nmap -A -T4 82.195.79.41 Starting Nmap 6.</description>
    </item>
    
    <item>
      <title>Android remote sniffing using Tcpdump, nc and Wireshark</title>
      <link>http://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/</guid>
      <description>If you want to sniff your devices traffic and visualize it on Wireshark, you&amp;rsquo;ll need:
 tcpdump netcat wireshark/tshark  Make sure you have tcpdump installed on your machine. I highly recommend you installing the Debian Kit which I&amp;rsquo;ve been using for years now. It makes things less complicated. Once you have done that, log in to your Android device and switch to the Debian environment:
victor@delia:/$ adb shell # deb root@debian:/# Now you can start tcpdump and pipe its output to netcat:</description>
    </item>
    
    <item>
      <title>Redirect Androids traffic to Burp</title>
      <link>http://blog.dornea.nu/2015/02/19/redirect-androids-traffic-to-burp/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/02/19/redirect-androids-traffic-to-burp/</guid>
      <description>If you want to redirect you Android devices traffic to your Burp instance, you&amp;rsquo;ll just have to use DNAT and MASQUERADING. I was more detailed about this topic in this post. And since the Internet is full of misleading information these are the steps to get it working. A small side remark: Most articles show you how to route the devices traffic through another machine (hosting the Burp instance). In that case one could:</description>
    </item>
    
    <item>
      <title>Android Hacker&#39;s Handbook</title>
      <link>http://blog.dornea.nu/2015/01/15/android-hackers-handbook/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/01/15/android-hackers-handbook/</guid>
      <description>{% img http://dl.dornea.nu/img/2015/18add683b7e400d63d7172be60eb564a.jpg %}
What should I say about this book? A lot has been said and this uppon reasonable grounds. This book is meant to give you an overview of the most important security topics related to Android. Not only you&amp;rsquo;ll get a lot of stuff about Android&amp;rsquo;s internals, you&amp;rsquo;ll also learn about exploits (and how they work) targeting the this platform. I think I didn&amp;rsquo;t have the time (and also the full knowledge) to look at any specific detail this book covers.</description>
    </item>
    
    <item>
      <title>2014 - Personal review</title>
      <link>http://blog.dornea.nu/2014/12/22/2014-personal-review/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/22/2014-personal-review/</guid>
      <description>Well, where should I start? Looking back at my blog archives I&amp;rsquo;ve realized 2014 &amp;ldquo;year of the mobile apps&amp;rdquo; - at least for me. I was heavily involved in analyzing mobile applications: Android and iOS. For the first time in my whole infosec career path I was disassembling iOS applications and doing stuff (binary analysis) I was used to (some years ago). Besides doing a lot of mobile apps analysis, I was pretty much involved in structuring and hacking data.</description>
    </item>
    
    <item>
      <title>Import Burp cert into Android</title>
      <link>http://blog.dornea.nu/2014/12/03/import-burp-cert-into-android/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/03/import-burp-cert-into-android/</guid>
      <description>As already mentioned in previous posts, in order to install Burps CA certificate, just go to the IP address Burp is listening on, followed by /cert, e.g. http://127.0.0.1:8080/cert. There you can download the cert and push it to your Android device. Usually you&amp;rsquo;ll get a binary certificate in DER format: cacert.crt.
Android won&amp;rsquo;t recognize this file as a cert. You&amp;rsquo;ll have to rename it to: cacert.der and push it to your device:</description>
    </item>
    
    <item>
      <title>HowTo: Proxy Non-Proxy-Aware Android Applications through Burp</title>
      <link>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</guid>
      <description>Proxying HTTP(s) traffic from Android devices through Burp should be actually no magic. Nevertheless you&amp;rsquo;ll have to take some important steps into consideration:
  Install Burps CA cert on the device
 I usually access Burp directly and download the cert file (cacert.crt) If Burp is listening on 192.168.1.1:8080, just go to http://192.168.1.1:8080/cert to download the cert Push this file to your device and install the certificate    Install ProxyDroid on Android</description>
    </item>
    
    <item>
      <title>Re-Root Nexus 10 4.x</title>
      <link>http://blog.dornea.nu/2014/12/02/re-root-nexus-10-4.x/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/re-root-nexus-10-4.x/</guid>
      <description>I wrote this since I always forget the 2 essential steps in order to regain root on a Nexus 10 device which has been updated over-the-air. Basically you&amp;rsquo;ll have to flash a new recovery image:
# ~/android-sdk/platform-tools/fastboot flash recovery recovery-clockwork-touch-6.0.4.3-manta.img ... Before booting into recovery make sure you&amp;rsquo;ll push the latest SuperSU zip package to your device:
# adb push UPDATE-SuperSU-v1.51.zip /mnt/sdcard ... Boot into recovery:
# adb reboot recovery .</description>
    </item>
    
    <item>
      <title>HowTo: Androguard with Docker</title>
      <link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid>
      <description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description>
    </item>
    
    <item>
      <title>HowTo: Debug Android APKs with Eclipse and DDMS</title>
      <link>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</guid>
      <description>Simply out of necessity I&amp;rsquo;ve written this mini-tutorial how debug android APKs using Eclipse and DDMS. After hours of wild googling these are the steps to make your APK debuggable under Eclipse. I&amp;rsquo;ll be using the FakeBanker APK reverse-engineered in previous articles.
Revisions  UPDATE 2014-12-09:  Before looking at the next steps, make sure you&amp;rsquo;ll have a look at ADUS. It will help you with the automation of several steps described in this post.</description>
    </item>
    
    <item>
      <title>Android Dynamic Code Analysis - Mastering DroidBox</title>
      <link>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</guid>
      <description>In this article I&amp;rsquo;ll have a a closer look at DroidBox which provides a mobile sandbox to look at Android applications. In the previous post I&amp;rsquo;ve dealt with static code analysis. This time will start running our malicious application and look at the &amp;ldquo;noise&amp;rdquo; it generates. That would be:
 file system access network activity interaction with the operating system interaction with other applications etc.  DroidBox is very easy to use and consists of an own system image and kernel meant to log one applications activities.</description>
    </item>
    
    <item>
      <title>Disect Android APKs like a Pro - Static code analysis</title>
      <link>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</guid>
      <description>I&amp;rsquo;ve started writing this IPython notebook in order to make myself more comfortable with Android and its SDK. Due to some personal interests I thought I could also have a look at the available RE tools and learn more about their pros &amp;amp; cos. In particular I had a closer look at AndroGuard which seems to be good at:
 Reverse engineering, Malware and goodware analysis of Android applications &amp;hellip; and more (ninja !</description>
    </item>
    
    <item>
      <title>Links of the Week #25</title>
      <link>http://blog.dornea.nu/2014/01/31/links-of-the-week-#25/</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/31/links-of-the-week-#25/</guid>
      <description>    NSA BIOS Backdoor a.k.a. God Mode Malware Part 1: DEITYBOUNCE
  Step-by-Step Guide To Decompiling Android Apps
  Untraceable Blog
  Continuously jam all wifi clients and access points within range
    eduroam WiFi security audit or why it is broken by design
    Java-based malware driving DDoS botnet infects Windows, Mac, Linux device
  </description>
    </item>
    
    <item>
      <title>Links of the Week #24</title>
      <link>http://blog.dornea.nu/2014/01/24/links-of-the-week-#24/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/24/links-of-the-week-#24/</guid>
      <description>Suterusu Rootkit: Inline Kernel Function Hooking on x86 and ARM
  Oldboot: the first bootkit on Android
  For the Love of Money
    TCP backdoor 32764 or how we could patch the Internet (or part of it ;))   2013 Cyber Attacks Statistics (Summary)
  Decebal: Point-of-Sale Malware - 400 lines of VBScript code from Romania, Researchers warns about evolution of threats and interests to modern retailers</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</guid>
      <description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is ending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump - IPython Notebook Version</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</guid>
      <description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is sending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description>
    </item>
    
    <item>
      <title>Links of the Week #22</title>
      <link>http://blog.dornea.nu/2013/12/20/links-of-the-week-#22/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/12/20/links-of-the-week-#22/</guid>
      <description>  Remote Code Execution exploit in WordPress 3.5.1
  Dissection of Android malware MouaBad.P
  Linux: Keep An Eye On Your System With Glances Monitor
    DNA seen through the eyes of a coder
  Infection of biological DNA with digital Computer Code
    OpenBSD Exploit mitigation techniques
  RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis
  </description>
    </item>
    
    <item>
      <title>Links of the Week #20</title>
      <link>http://blog.dornea.nu/2013/12/06/links-of-the-week-#20/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/12/06/links-of-the-week-#20/</guid>
      <description> Android Root Detection Techniques Shmoocon 2013 Playlist INSECURE Mag 40 A society of phone Zombies Encrypted peer-to-peer web application platform for decentralized, privacy-preserving applications The UNIX system family tree: Research and BSD Found: Hacker server storing two million pilfered passwords Burp/Zap plugin: generator script  </description>
    </item>
    
    <item>
      <title>Links of the Week #16</title>
      <link>http://blog.dornea.nu/2013/11/08/links-of-the-week-#16/</link>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/11/08/links-of-the-week-#16/</guid>
      <description> Yet Another Android Master Key Bug tmuxp - manage tmux workspaces NSA files: Decoded (really good article) Analysis of an mbr*wserstats and counter.php infected webserver Have fun with Jenkins Commandline forensics of hacked PHP.net  </description>
    </item>
    
    <item>
      <title>Links of the Week #12</title>
      <link>http://blog.dornea.nu/2013/09/20/links-of-the-week-#12/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/09/20/links-of-the-week-#12/</guid>
      <description> Hackers Courted by Government for Cyber Security Jobs - Rolling Stone We scanned the Internet for port 22 Hosting backdoors in hardware (Ksplice Blog) Distributed systems for fun and profit Analyzing an Android Webview Exploit  </description>
    </item>
    
    <item>
      <title>Links of the Week #8</title>
      <link>http://blog.dornea.nu/2013/08/09/links-of-the-week-#8/</link>
      <pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/08/09/links-of-the-week-#8/</guid>
      <description> Android Bug 82119321: A comprehensive description of the recent Android bug also known as the signature bug FOOAS: Fuck Of As A Service localtunnel: Access your local web server through the internet [A Tour Inside CloudFlare’s Latest Generation Servers}(http://blog.cloudflare.com/a-tour-inside-cloudflares-latest-generation-servers): Really impressive! Here’s What Wi-Fi Would Look Like If We Could See It Why I left OpenBSD: Remember self interview after leaving NetBSD? Function Hooking Part 1 – Hooking shared library function calls in Linux  </description>
    </item>
    
    <item>
      <title>Links of the week #7</title>
      <link>http://blog.dornea.nu/2013/07/12/links-of-the-week-#7/</link>
      <pubDate>Fri, 12 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/07/12/links-of-the-week-#7/</guid>
      <description>Root Cause Analysis Integer Overflows: Nice analysis! Nginx just became the most used web server among the top 1000 websites: Glad to hear that! Hacking Java Bytecode for Programmers (Part4) Krakatau And The Case Of The Integer Overflow: The 4th part is online! This time dealing with integer overflows&amp;hellip; Secure website-authentication using GPG keys: Nice idea but lacks of proper secure implementation. Uncovering Android Master Key That Makes 99% of Devices Vulnerable: Sort of link of the week!</description>
    </item>
    
    <item>
      <title>Links of the Week #5</title>
      <link>http://blog.dornea.nu/2013/06/21/links-of-the-week-#5/</link>
      <pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/06/21/links-of-the-week-#5/</guid>
      <description>This weeks top links:
 The most sophisticated Android Trojan: Really nice analysis. I think security on mobile devices will become more and more hype. At our current rate of progress, IPv6 will be fully implemented on May 10, 2148: `There is no reason for any individual to have a computer in his home. Well.. Not really! Writing buffer overflow exploits - a tutorial for beginners: Another buffer overflow tutorial. Buffer Overflows - Nopsled and Ret2Libc methods: Just excellent!</description>
    </item>
    
    <item>
      <title>Find out your geolocation via MAC address</title>
      <link>http://blog.dornea.nu/2010/10/07/find-out-your-geolocation-via-mac-address/</link>
      <pubDate>Thu, 07 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/10/07/find-out-your-geolocation-via-mac-address/</guid>
      <description>Today I found a very interesting article about geoposition localisation based on MAC addresses. MAC addresses ? Yeah, right! As securiteam described here it is possible to find out your location using Google&amp;rsquo;s Location Services REST API. Further information can be found on Dinis Cruz blog. But where is all the data coming from? You may also have noticed Google&amp;rsquo;s Street View cars scanning your neighborhood for WLAN access points. Oh, I have forgotten about that: It wasn&amp;rsquo;t Google&amp;rsquo;s intention as stated here.</description>
    </item>
    
  </channel>
</rss>
