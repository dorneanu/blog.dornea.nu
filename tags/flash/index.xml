<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flash on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/flash/</link>
    <description>Recent content in flash on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/flash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decode Adobe Flex AMF protocol </title>
      <link>http://blog.dornea.nu/notes/decode-adobe-flex-amf-protocol/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/notes/decode-adobe-flex-amf-protocol/</guid>
      <description>If you ever had the opportunity to pentest Flash applications you might have had problems analyzing the traffic between the client and the backend. An increasing number of (web) applications is using Adobe Flex at the presentation layer which uses the ActionScript Message Format (AMF) to send data back and forth. One might think that Burp has already built-in decoding functionalities for AMF. Although this is the case I found Burp&amp;rsquo;s decoding to be more confusing than useful.</description>
    </item>
    
  </channel>
</rss>
