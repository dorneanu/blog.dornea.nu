<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mobile on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/mobile/</link>
    <description>Recent content in mobile on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/mobile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging Android native shared libraries</title>
      <link>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</guid>
      <description>Since I haven&amp;rsquo;t done this before, I thought I could share some experiences with you. All this began during some APK analysis which was heavily using JNIs. In my particular case Java Native Interfaces were used to call functions inside libraries written in C/C++. At that time I was quite unfamiliar with JNIs and how they actually work. Besides that I haven&amp;rsquo;t debugged any native applications/libraries on Android before. So this was the perfect opportunity to have a closer look at Android NDK and its debugging features.</description>
    </item>
    
    <item>
      <title>The iOS 8.1.3 fiasco</title>
      <link>http://blog.dornea.nu/2015/02/26/the-ios-8.1.3-fiasco/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/02/26/the-ios-8.1.3-fiasco/</guid>
      <description>From time to time we all seem to ignore the &amp;ldquo;voice of reason&amp;rdquo; and tend to unconsidered actions. This will be a short summary of what could go wrong when one is forced to quick reactions which will result in chaos.
All started with an iPad Air. I have jailbroken the device from the very first touch. That time iOS 7.x was installed and a jailbreak was available for that specific version (iOS 7.</description>
    </item>
    
    <item>
      <title>Android remote sniffing using Tcpdump, nc and Wireshark</title>
      <link>http://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/</guid>
      <description>If you want to sniff your devices traffic and visualize it on Wireshark, you&amp;rsquo;ll need:
 tcpdump netcat wireshark/tshark  Make sure you have tcpdump installed on your machine. I highly recommend you installing the Debian Kit which I&amp;rsquo;ve been using for years now. It makes things less complicated. Once you have done that, log in to your Android device and switch to the Debian environment:
victor@delia:/$ adb shell # deb root@debian:/# Now you can start tcpdump and pipe its output to netcat:</description>
    </item>
    
    <item>
      <title>Redirect Androids traffic to Burp</title>
      <link>http://blog.dornea.nu/2015/02/19/redirect-androids-traffic-to-burp/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/02/19/redirect-androids-traffic-to-burp/</guid>
      <description>If you want to redirect you Android devices traffic to your Burp instance, you&amp;rsquo;ll just have to use DNAT and MASQUERADING. I was more detailed about this topic in this post. And since the Internet is full of misleading information these are the steps to get it working. A small side remark: Most articles show you how to route the devices traffic through another machine (hosting the Burp instance). In that case one could:</description>
    </item>
    
    <item>
      <title>Android Hacker&#39;s Handbook</title>
      <link>http://blog.dornea.nu/2015/01/15/android-hackers-handbook/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/01/15/android-hackers-handbook/</guid>
      <description>{% img http://dl.dornea.nu/img/2015/18add683b7e400d63d7172be60eb564a.jpg %}
What should I say about this book? A lot has been said and this uppon reasonable grounds. This book is meant to give you an overview of the most important security topics related to Android. Not only you&amp;rsquo;ll get a lot of stuff about Android&amp;rsquo;s internals, you&amp;rsquo;ll also learn about exploits (and how they work) targeting the this platform. I think I didn&amp;rsquo;t have the time (and also the full knowledge) to look at any specific detail this book covers.</description>
    </item>
    
    <item>
      <title>HowTo: Proxy Non-Proxy-Aware Android Applications through Burp</title>
      <link>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</guid>
      <description>Proxying HTTP(s) traffic from Android devices through Burp should be actually no magic. Nevertheless you&amp;rsquo;ll have to take some important steps into consideration:
  Install Burps CA cert on the device
 I usually access Burp directly and download the cert file (cacert.crt) If Burp is listening on 192.168.1.1:8080, just go to http://192.168.1.1:8080/cert to download the cert Push this file to your device and install the certificate    Install ProxyDroid on Android</description>
    </item>
    
    <item>
      <title>HowTo: iOS Apps - Static analysis</title>
      <link>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</guid>
      <description>In this short article I&amp;rsquo;ll try to explain what are the main steps to analyze an iOS app. Since I&amp;rsquo;ve writen similar posts related to Android I thought I could devote some of spare time writing about the steps required to analyze iOS apps/binaries. But first of all let&amp;rsquo;s start with:
What&amp;rsquo;s an iOS app? In a nutshell here are the main characteristics:
 Objective-C / C / C++ compiled (ARM) executable mostly encrypted using Apple&amp;rsquo;s Fairplay DRM it runs in a sandbox it&amp;rsquo;s installed by the user mobile apps come as an IPA file which is the counterpart to Android&amp;rsquo;s APK  Now that you roughly know what an iOS app is let&amp;rsquo;s have a look at the most common blackbox pentesting tools out there.</description>
    </item>
    
    <item>
      <title>HowTo: Androguard with Docker</title>
      <link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid>
      <description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description>
    </item>
    
    <item>
      <title>HowTo: Debug Android APKs with Eclipse and DDMS</title>
      <link>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</guid>
      <description>Simply out of necessity I&amp;rsquo;ve written this mini-tutorial how debug android APKs using Eclipse and DDMS. After hours of wild googling these are the steps to make your APK debuggable under Eclipse. I&amp;rsquo;ll be using the FakeBanker APK reverse-engineered in previous articles.
Revisions  UPDATE 2014-12-09:  Before looking at the next steps, make sure you&amp;rsquo;ll have a look at ADUS. It will help you with the automation of several steps described in this post.</description>
    </item>
    
    <item>
      <title>Android Dynamic Code Analysis - Mastering DroidBox</title>
      <link>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</guid>
      <description>In this article I&amp;rsquo;ll have a a closer look at DroidBox which provides a mobile sandbox to look at Android applications. In the previous post I&amp;rsquo;ve dealt with static code analysis. This time will start running our malicious application and look at the &amp;ldquo;noise&amp;rdquo; it generates. That would be:
 file system access network activity interaction with the operating system interaction with other applications etc.  DroidBox is very easy to use and consists of an own system image and kernel meant to log one applications activities.</description>
    </item>
    
    <item>
      <title>Disect Android APKs like a Pro - Static code analysis</title>
      <link>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</guid>
      <description>I&amp;rsquo;ve started writing this IPython notebook in order to make myself more comfortable with Android and its SDK. Due to some personal interests I thought I could also have a look at the available RE tools and learn more about their pros &amp;amp; cos. In particular I had a closer look at AndroGuard which seems to be good at:
 Reverse engineering, Malware and goodware analysis of Android applications &amp;hellip; and more (ninja !</description>
    </item>
    
  </channel>
</rss>
