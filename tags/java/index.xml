<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/java/</link>
    <description>Recent content in java on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Aug 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HowTo: Debug Android APKs with Eclipse and DDMS</title>
      <link>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</guid>
      <description>Simply out of necessity I&amp;rsquo;ve written this mini-tutorial how debug android APKs using Eclipse and DDMS. After hours of wild googling these are the steps to make your APK debuggable under Eclipse. I&amp;rsquo;ll be using the FakeBanker APK reverse-engineered in previous articles.
Revisions  UPDATE 2014-12-09:  Before looking at the next steps, make sure you&amp;rsquo;ll have a look at ADUS. It will help you with the automation of several steps described in this post.</description>
    </item>
    
    <item>
      <title>On Java, OpenSSL, Crypto, Blowfish and stuff</title>
      <link>http://blog.dornea.nu/2014/07/01/on-java-openssl-crypto-blowfish-and-stuff/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/07/01/on-java-openssl-crypto-blowfish-and-stuff/</guid>
      <description>During some Android malware analysis I came along some Java routines which were meant to decrypt/encrypt some content. Nothing special about it. The key had to be extracted from a file and the encrypted file was in Base64. After unsuccessfully trying openssl in order to decrypt the file I decided to make some further investigations.
In this article I&amp;rsquo;ll have a look how Python, Java and openssl (command line utility) implement Blowfish in CBC mode.</description>
    </item>
    
    <item>
      <title>Links of the Week #25</title>
      <link>http://blog.dornea.nu/2014/01/31/links-of-the-week-#25/</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/31/links-of-the-week-#25/</guid>
      <description>    NSA BIOS Backdoor a.k.a. God Mode Malware Part 1: DEITYBOUNCE
  Step-by-Step Guide To Decompiling Android Apps
  Untraceable Blog
  Continuously jam all wifi clients and access points within range
    eduroam WiFi security audit or why it is broken by design
    Java-based malware driving DDoS botnet infects Windows, Mac, Linux device
  </description>
    </item>
    
    <item>
      <title>HowTo: Automate Burp using Burp Extender API</title>
      <link>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</guid>
      <description>I really love Burp. Since I use it on a daily basis I thought there might be some way to automate it. Usually I mainly do these steps to scan some URL:
 Define scope Start manual exploring OR spider the URL in order to get some target map Activate passive scanning Activate live scanning Wait to the scan to finish Have a look at the results Save/export the results  Well these are a lot of steps which have to be done manually.</description>
    </item>
    
    <item>
      <title>Links of the week #7</title>
      <link>http://blog.dornea.nu/2013/07/12/links-of-the-week-#7/</link>
      <pubDate>Fri, 12 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/07/12/links-of-the-week-#7/</guid>
      <description>Root Cause Analysis Integer Overflows: Nice analysis! Nginx just became the most used web server among the top 1000 websites: Glad to hear that! Hacking Java Bytecode for Programmers (Part4) Krakatau And The Case Of The Integer Overflow: The 4th part is online! This time dealing with integer overflows&amp;hellip; Secure website-authentication using GPG keys: Nice idea but lacks of proper secure implementation. Uncovering Android Master Key That Makes 99% of Devices Vulnerable: Sort of link of the week!</description>
    </item>
    
    <item>
      <title>Links of the Week #3</title>
      <link>http://blog.dornea.nu/2013/05/31/links-of-the-week-#3/</link>
      <pubDate>Fri, 31 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/05/31/links-of-the-week-#3/</guid>
      <description>Anatomy of a hack: How crackers ransack passwords like qeadzcwrsfxv1331 This is definetely link of the month! I never had to crack hashes in my life but this article is way the best introduction to the cracking/brute-forcing techniques. This is a must for all crackers out there (Thanks Marcin for the link). Yes, disassemble with Javap ALL OVER THE PLACE! Hacking Java Bytecode for Programmers (Part3): If the site is down check out this link.</description>
    </item>
    
    <item>
      <title>Java? Without Eclipse? Eclim!</title>
      <link>http://blog.dornea.nu/2010/06/05/java-without-eclipse-eclim/</link>
      <pubDate>Sat, 05 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/06/05/java-without-eclipse-eclim/</guid>
      <description>I don&amp;rsquo;t really like bloated IDEs like Netbeans and Eclipse: Too much functionality, so you might get confused and frustrated. I rather use my one and only friend called vim: C, C++, Python, Assembler &amp;hellip; and now Java! What? Yes, it can be a pleasure to code Java in vim. Thanks to eclim your vim gets Eclipse functionality without starting/using Eclipse. In my opinion vim ist the best editor I&amp;rsquo;ve ever seen.</description>
    </item>
    
  </channel>
</rss>
