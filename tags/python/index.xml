<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/python/</link>
    <description>Recent content in python on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Oct 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fuzzing the hell out of conntrack tools</title>
      <link>http://blog.dornea.nu/2016/10/28/fuzzing-the-hell-out-of-conntrack-tools/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/10/28/fuzzing-the-hell-out-of-conntrack-tools/</guid>
      <description>Fuzzing is nowadays the attack technique used by a lot of pentesters and security researchers. Whether you&amp;rsquo;re looking for vulnerabilities in media files (pictures, videos, audio stuff) or just binary files, fuzzing is the right approach if you don&amp;rsquo;t want to do some static code analysis or debug the hell out of your targets.
When it comes to fuzzing there are a few tools to mention that have established during the last years.</description>
    </item>
    
    <item>
      <title>Manage PKI using OpenSSL</title>
      <link>http://blog.dornea.nu/2015/10/02/manage-pki-using-openssl/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/10/02/manage-pki-using-openssl/</guid>
      <description>In the previous X.509 related post I&amp;rsquo;ve had a look at the internals of a X.509 certficate. This time I want to setup my own PKI using some open source software. This post is a preparation for setting up a VPN using OpenVPN.
Before implementing the PKI let&amp;rsquo;s have a look what a PKI should definitely include (make sure you have a look at the Wikipedia entry):
 certificate authority (CA)  has a public and a private key used to digitally sign certificates   registration authority (RA)  verify identify of users requesting information from the CA   certificate management system  probably the most important component    Revision CA types There are several types of CAs:</description>
    </item>
    
    <item>
      <title>Debugging Android native shared libraries</title>
      <link>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</guid>
      <description>Since I haven&amp;rsquo;t done this before, I thought I could share some experiences with you. All this began during some APK analysis which was heavily using JNIs. In my particular case Java Native Interfaces were used to call functions inside libraries written in C/C++. At that time I was quite unfamiliar with JNIs and how they actually work. Besides that I haven&amp;rsquo;t debugged any native applications/libraries on Android before. So this was the perfect opportunity to have a closer look at Android NDK and its debugging features.</description>
    </item>
    
    <item>
      <title>Decode Adobe Flex AMF protocol </title>
      <link>http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/</guid>
      <description>If you ever had the opportunity to pentest Flash applications you might have had problems analyzing the traffic between the client and the backend. An increasing number of (web) applications is using Adobe Flex at the presentation layer which uses the ActionScript Message Format (AMF) to send data back and forth. One might think that Burp has already built-in decoding functionalities for AMF. Although this is the case I found Burp&amp;rsquo;s decoding to be more confusing than useful.</description>
    </item>
    
    <item>
      <title>Validating and pinning X.509 certificates</title>
      <link>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</link>
      <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</guid>
      <description>In times of NSA, surveillance and data privacy, protecting your data has become an essential part of your every day life. A good understanding of basic principles is half the battle. In this post I just wanted to have look at SSL/TLS from a developer point of view but also from an users one. On the one hand I wanted to use openssl as a CLI utility to inspect and validate X.</description>
    </item>
    
    <item>
      <title>Adding concurrency to smalisca</title>
      <link>http://blog.dornea.nu/2015/05/06/adding-concurrency-to-smalisca/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/05/06/adding-concurrency-to-smalisca/</guid>
      <description>When it comes to parallelism Python has some constraints which have to be taken into consideration before starting coding. I think the biggest one has to do with the Global Interpreter Lock which prevents several threads from executing Python bytecodes at once. Nevertheless you may want to apply concurrency patterns to you code in order to achieve more speed. Besides that you may want to use your cores properly otherwise you&amp;rsquo;ll end up like this:</description>
    </item>
    
    <item>
      <title>GUIfy your Apps using Flask</title>
      <link>http://blog.dornea.nu/2015/02/05/guify-your-apps-using-flask/</link>
      <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/02/05/guify-your-apps-using-flask/</guid>
      <description>If you follow this blog, you might have noticed that I&amp;rsquo;m mainly interested in #infosec, #hacking and so on. The main reason for writing this post was to encourage people to look behind the plate and make their life more enjoyable (and still stay inside their comfort zone :). Ok, &amp;ldquo;WTF?&amp;rdquo; you&amp;rsquo;re probably asking yourself. Let me first start with a more detailed motivation behind this writing.
Motivation Being involved in data analysis on a daily basis, I have to read and modify data in a quick and easy way.</description>
    </item>
    
    <item>
      <title>2014 - Personal review</title>
      <link>http://blog.dornea.nu/2014/12/22/2014-personal-review/</link>
      <pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/22/2014-personal-review/</guid>
      <description>Well, where should I start? Looking back at my blog archives I&amp;rsquo;ve realized 2014 &amp;ldquo;year of the mobile apps&amp;rdquo; - at least for me. I was heavily involved in analyzing mobile applications: Android and iOS. For the first time in my whole infosec career path I was disassembling iOS applications and doing stuff (binary analysis) I was used to (some years ago). Besides doing a lot of mobile apps analysis, I was pretty much involved in structuring and hacking data.</description>
    </item>
    
    <item>
      <title>Using Blockdiag with Pelican and liquid tags</title>
      <link>http://blog.dornea.nu/2014/11/21/using-blockdiag-with-pelican-and-liquid-tags/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/11/21/using-blockdiag-with-pelican-and-liquid-tags/</guid>
      <description>After writing the previous article I thought I should share some Blockdiag plugin for Pelican. You can also check out the pull request.
blockdiag It&amp;rsquo;s basically a graphviz like utility with its own language (similar to DOT). You can create:
 block diagrams sequence diagrams activity diagrams network diagrams rack diagrams packet diagrams  It can save you a lot of time and has a pretty simple syntax. You can always test your code online using blockdiag&amp;rsquo;s interactive shell.</description>
    </item>
    
    <item>
      <title>Using Graphviz with Pelican and liquid tags</title>
      <link>http://blog.dornea.nu/2014/11/13/using-graphviz-with-pelican-and-liquid-tags/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/11/13/using-graphviz-with-pelican-and-liquid-tags/</guid>
      <description>I really like keeping things simple. And I also like generating figures from code using Graphviz. And since there was no Graphviz plugin for pelican I wrote my own one.
Using liquid tags I wanted to get my graphviz code rendered and automatically included as a base64 encoded image in my HTML code. I&amp;rsquo;ve created a pull request but you can find a fork at dorneanu-pelican.
Basically the tags works as follows:</description>
    </item>
    
    <item>
      <title>Generate all IP addresses from ASN</title>
      <link>http://blog.dornea.nu/2014/09/17/generate-all-ip-addresses-from-asn/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/17/generate-all-ip-addresses-from-asn/</guid>
      <description>Sometimes you need to know if a certain IP (or several ones) are within an IP range or belong to a certain ASN. Let&amp;rsquo;s give it a try and generate all possible IP addresses for telekom.de.
$ dig telekom.de ... telekom.de. 86346 IN A 46.29.100.76 ... Now let&amp;rsquo;s find out the ASN:
$ whois 46.29.100.76 | grep origin origin: AS34086 Now ask RIPE for the IP ranges:
$ whois -h whois.</description>
    </item>
    
    <item>
      <title>HowTo: Androguard with Docker</title>
      <link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid>
      <description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description>
    </item>
    
    <item>
      <title>Using JQuery DataTables with IPython</title>
      <link>http://blog.dornea.nu/2014/08/28/using-jquery-datatables-with-ipython/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/28/using-jquery-datatables-with-ipython/</guid>
      <description>I thought this might be interesting enough to share with you. Every time I&amp;rsquo;m working with DataFrames I somehow miss the search feature: I&amp;rsquo;d like to search for certain patterns inside the columns and rows. I used to use JQuery DataTables for netgrafio. But I couldn&amp;rsquo;t find any simple way to integrate it with IPython. Well it was easier than I thought.
Extensions # &amp;lt;!-- collapse=True --&amp;gt; from IPython import display from IPython.</description>
    </item>
    
    <item>
      <title>Python for Data Analysis</title>
      <link>http://blog.dornea.nu/2014/08/06/python-for-data-analysis/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/06/python-for-data-analysis/</guid>
      <description>I use Python on daily basis. I love IPython and use it as my main shell for every day tasks. So it was a matter of time until I got captivated by panda, scipy and numpy. I&amp;rsquo;ve ordered myself Python for Data Analysis in order to get more familiar with the mentioned libraries. Before that I used to semi-understand how their work and got used to that copy&amp;amp;paste mentality.
This book is not only about data analysis.</description>
    </item>
    
    <item>
      <title>Web Application Survey Tutorial</title>
      <link>http://blog.dornea.nu/2014/08/06/web-application-survey-tutorial/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/06/web-application-survey-tutorial/</guid>
      <description>Suppose you get a list of some URLs and you are asked to &amp;ldquo;investigate&amp;rdquo; them. The list is full of some random URLs related to your company and nobody knows about. You don&amp;rsquo;t have a clue who is responsible for them nor which applications (if any) are running behind them. Sounds like a cool task, ugh?
Well in today&amp;rsquo;s post I&amp;rsquo;ll show you how I&amp;rsquo;ve managed it to minimize the process of analyzing each URL manually and saved me a lot of time automatizing things.</description>
    </item>
    
    <item>
      <title>On Java, OpenSSL, Crypto, Blowfish and stuff</title>
      <link>http://blog.dornea.nu/2014/07/01/on-java-openssl-crypto-blowfish-and-stuff/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/07/01/on-java-openssl-crypto-blowfish-and-stuff/</guid>
      <description>During some Android malware analysis I came along some Java routines which were meant to decrypt/encrypt some content. Nothing special about it. The key had to be extracted from a file and the encrypted file was in Base64. After unsuccessfully trying openssl in order to decrypt the file I decided to make some further investigations.
In this article I&amp;rsquo;ll have a look how Python, Java and openssl (command line utility) implement Blowfish in CBC mode.</description>
    </item>
    
    <item>
      <title>Migrate this blog from Octopress to Pelican</title>
      <link>http://blog.dornea.nu/2014/06/18/migrate-this-blog-from-octopress-to-pelican/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/06/18/migrate-this-blog-from-octopress-to-pelican/</guid>
      <description>A few weeks ago I&amp;rsquo;be migrated my whole blog from Wordpress to Octopress. Meanwhile I&amp;rsquo;ve discovered Pelican which is the Pythonic alternative to Octopress. To be honest: The main reason I&amp;rsquo;m using Pelican instead of Octopress is the ability to import/include IPython notebooks.
After I&amp;rsquo;ve set up my blog using Octopress I only had a bunge of Markdown files. So let&amp;rsquo;s get started.
Generate metadata for content %%bash cp ~/work/blog/octopress/source/_posts/*.markdown ~/work/blog/pelican/content/markdown/ %%bash ls -c ~/work/blog/pelican/content/markdown/ | head -n 10 2014-05-27-berlinsides-0x05.</description>
    </item>
    
    <item>
      <title>HowTo: Write pentest reports the easy way</title>
      <link>http://blog.dornea.nu/2014/05/20/howto-write-pentest-reports-the-easy-way/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/05/20/howto-write-pentest-reports-the-easy-way/</guid>
      <description>In this post I&amp;rsquo;ll try to share an idea I&amp;rsquo;ve had regarding pentest reports. Most of you surely have their own methods and tools to create nice looking reports after have done some pentesting. Since I try to keep things simple I&amp;rsquo;ll give you a rough idea how this could be done without Excel &amp;amp; Co.
Scenario Suppose you conduct a pentest and take notes during it. Afterwards you&amp;rsquo;ll be probably be copy&amp;amp;paste&amp;rsquo;integratedP the whole content into a layout or pre-defined document.</description>
    </item>
    
    <item>
      <title>HowTo: Create docs with sphinx</title>
      <link>http://blog.dornea.nu/2014/05/04/howto-create-docs-with-sphinx/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/05/04/howto-create-docs-with-sphinx/</guid>
      <description>In this post I&amp;rsquo;d like to show some handy way to improve your process of documentating your project. Since we all know documentation is a must you might have wondered how to handle that without any big efforts. In fact it would be great if you could write your code along with the documentation and extract it later on for publishing.
Meet sphinx It is a tool that you&amp;rsquo;ll love! Being more technical:</description>
    </item>
    
    <item>
      <title>Unfancy dashboard using matplotlib</title>
      <link>http://blog.dornea.nu/2014/03/07/unfancy-dashboard-using-matplotlib/</link>
      <pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/03/07/unfancy-dashboard-using-matplotlib/</guid>
      <description>I was recently playing around with D3Â and discovered its dashboard posibilities.dashboarddude.comÂ has a nice compilation of really fancy dashboards (I was mainly interested in D3 but voila&amp;hellip; there are also other ways to do it).
Meanwhile I was remembered of old good IPython Notebook and its plotting features. This is what came out (You can find the code also on Github Gist: https://gist.github.com/dorneanu/9407737):
import datetime as dt import matplotlib.dates as mdates from mpl_toolkits.</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</guid>
      <description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is ending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump - IPython Notebook Version</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</guid>
      <description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is sending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description>
    </item>
    
    <item>
      <title>Links of the Week #23</title>
      <link>http://blog.dornea.nu/2014/01/17/links-of-the-week-#23/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/17/links-of-the-week-#23/</guid>
      <description>InkTag: Secure Applications on an Untrusted Operating System
  Unicode Security Guide
  Hunting Botnets with ZMap
  EncFS Security Audit
  Hacking Tools Repository
  The Hacker Who Cracked the Code in Iron Man and The Social Network
  Operating System Tutorials
  The Jobless Ph.D. Generation
  The Holy Book of Passwords by Aram Bartholl
  Reconstructing the Cryptanalytic Attack behind the Flame Malware</description>
    </item>
    
    <item>
      <title>HowTo: Automate Burp using Burp Extender API</title>
      <link>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</guid>
      <description>I really love Burp. Since I use it on a daily basis I thought there might be some way to automate it. Usually I mainly do these steps to scan some URL:
 Define scope Start manual exploring OR spider the URL in order to get some target map Activate passive scanning Activate live scanning Wait to the scan to finish Have a look at the results Save/export the results  Well these are a lot of steps which have to be done manually.</description>
    </item>
    
    <item>
      <title>Birthday paradox/problem</title>
      <link>http://blog.dornea.nu/2010/05/07/birthday-paradox/problem/</link>
      <pubDate>Fri, 07 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/05/07/birthday-paradox/problem/</guid>
      <description>In probability theory, the birthday problem, or birthday paradox pertains to the probability that in a set of randomly chosen people some pair of them will have the same birthday. In a group of at least 23 randomly chosen people, there is more than 50% probability that some pair of them will have the same birthday. Such a result is counter-intuitive to many.
For 57 or more people, the probability is more than 99%, and it reaches 100% when, ignoring leap-years, the number of people reaches 366 (by the pigeonhole principle).</description>
    </item>
    
    <item>
      <title>Why use Python? The n00b mini-review</title>
      <link>http://blog.dornea.nu/2009/04/07/why-use-python-the-n00b-mini-review/</link>
      <pubDate>Tue, 07 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/04/07/why-use-python-the-n00b-mini-review/</guid>
      <description>I&amp;rsquo;ve been coding Python for almost one week. I really thank O&amp;rsquo;Reilly for their good quality and well structured books. If you ever plan to learn Python, just have a look at &amp;ldquo;Learning Python - 3rd Edition&amp;rdquo; by Mark Lutz. You&amp;rsquo;ll love it! And you&amp;rsquo;ll really get impressed and fascinated by Pythons vast functionalities like I did.
So what&amp;rsquo;s the big thing about Python? Well to be honest my answer is simply: Because it&amp;rsquo;s damn cool.</description>
    </item>
    
  </channel>
</rss>
