<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sca on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/sca/</link>
    <description>Recent content in sca on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Feb 2021 11:12:17 +0100</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/sca/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lessons from building static analysis tools at Google</title>
      <link>http://blog.dornea.nu/notes/lessons-from-building-static-analysis-tools-at-google/</link>
      <pubDate>Fri, 26 Feb 2021 11:12:16 +0100</pubDate>
      
      <guid>http://blog.dornea.nu/notes/lessons-from-building-static-analysis-tools-at-google/</guid>
      <description>https://cacm.acm.org/magazines/2018/4/226371-lessons-from-building-static-analysis-tools-at-google/fulltext
Problems to solve  tool not integrated into developer&amp;rsquo;s workflow users don&amp;rsquo;t trust the results reported bug is theoretically possible, but the problem doesn&amp;rsquo;t really manifest in practice findings are to expensive to fix users don&amp;rsquo;t understand the warnings On &amp;ldquo;effective false positives&amp;rdquo;:  developers didn&amp;rsquo;t take action after seeing the issue developers don&amp;rsquo;t understand the fault and therefore don&amp;rsquo;t take action     Developers, not tool authors, will determine and act on a tool&amp;rsquo;s perceived false-positive rate.</description>
    </item>
    
    <item>
      <title>Scaling Static Analyses at Facebook</title>
      <link>http://blog.dornea.nu/notes/scaling-static-analyses-at-facebook/</link>
      <pubDate>Fri, 26 Feb 2021 11:12:17 +0100</pubDate>
      
      <guid>http://blog.dornea.nu/notes/scaling-static-analyses-at-facebook/</guid>
      <description>https://cacm.acm.org/magazines/2019/8/238344-scaling-static-analyses-at-facebook/fulltext
 To industry professionals we say: advanced static analyses, like those found in the research literature, can be deployed at scale and deliver value for general code. And to academics we say: from an industrial point of view the subject appears to have many unexplored avenues, and this provides research opportunities to inform future tools.
 Deployments &amp;ldquo;diff time&amp;rdquo; deployment  analyzers participate as bots in code review make automatic comments when engineer submits code modification this kind of deployment lead to 70% fix rate traditional (offline or batch) deployment saw a 0% fix rate security related issues are pushed to the security engineer on-call for commenting on code modification  Software Development at Facebook  there is a main codebase (master) this gets altered by modifications submitted by devs CI/CD:  anaylyses run on the code modification and participate by commenting their findings directly in the code review tool    Reporting  The actioned reports and missed bugs are related to the classic concepts of true positives and false negatives from the academic static analysis literature.</description>
    </item>
    
    <item>
      <title>Android Dynamic Code Analysis - Mastering DroidBox</title>
      <link>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</guid>
      <description>In this article I&amp;rsquo;ll have a a closer look at DroidBox which provides a mobile sandbox to look at Android applications. In the previous post I&amp;rsquo;ve dealt with static code analysis. This time will start running our malicious application and look at the &amp;ldquo;noise&amp;rdquo; it generates. That would be:
 file system access network activity interaction with the operating system interaction with other applications etc.  DroidBox is very easy to use and consists of an own system image and kernel meant to log one applications activities.</description>
    </item>
    
    <item>
      <title>Disect Android APKs like a Pro - Static code analysis</title>
      <link>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</guid>
      <description>I&amp;rsquo;ve started writing this IPython notebook in order to make myself more comfortable with Android and its SDK. Due to some personal interests I thought I could also have a look at the available RE tools and learn more about their pros &amp;amp; cos. In particular I had a closer look at AndroGuard which seems to be good at:
 Reverse engineering, Malware and goodware analysis of Android applications &amp;hellip; and more (ninja !</description>
    </item>
    
  </channel>
</rss>
