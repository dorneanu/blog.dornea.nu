<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fakebanker on blog.dornea.nu</title><link>http://blog.dornea.nu/tags/fakebanker/</link><description>Recent content in fakebanker on blog.dornea.nu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Aug 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/fakebanker/index.xml" rel="self" type="application/rss+xml"/><item><title>HowTo: Debug Android APKs with Eclipse and DDMS</title><link>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</link><pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</guid><description>Simply out of necessity I&amp;rsquo;ve written this mini-tutorial how debug android APKs using Eclipse and DDMS. After hours of wild googling these are the steps to make your APK debuggable under Eclipse. I&amp;rsquo;ll be using the FakeBanker APK reverse-engineered in previous articles.
Revisions UPDATE 2014-12-09: Before looking at the next steps, make sure you&amp;rsquo;ll have a look at ADUS. It will help you with the automation of several steps described in this post.</description></item><item><title>Android Dynamic Code Analysis - Mastering DroidBox</title><link>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</link><pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</guid><description>In this article I&amp;rsquo;ll have a a closer look at DroidBox which provides a mobile sandbox to look at Android applications. In the previous post I&amp;rsquo;ve dealt with static code analysis. This time will start running our malicious application and look at the &amp;ldquo;noise&amp;rdquo; it generates. That would be:
file system access network activity interaction with the operating system interaction with other applications etc. DroidBox is very easy to use and consists of an own system image and kernel meant to log one applications activities.</description></item><item><title>Disect Android APKs like a Pro - Static code analysis</title><link>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</link><pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</guid><description>I&amp;rsquo;ve started writing this IPython notebook in order to make myself more comfortable with Android and its SDK. Due to some personal interests I thought I could also have a look at the available RE tools and learn more about their pros &amp;amp; cos. In particular I had a closer look at AndroGuard which seems to be good at:
Reverse engineering, Malware and goodware analysis of Android applications &amp;hellip; and more (ninja !</description></item></channel></rss>