<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on blog.dornea.nu</title><link>http://blog.dornea.nu/tags/coding/</link><description>Recent content in coding on blog.dornea.nu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Validating and pinning X.509 certificates</title><link>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</link><pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</guid><description>In times of NSA, surveillance and data privacy, protecting your data has become an essential part of your every day life. A good understanding of basic principles is half the battle. In this post I just wanted to have look at SSL/TLS from a developer point of view but also from an users one. On the one hand I wanted to use openssl as a CLI utility to inspect and validate X.</description></item><item><title>Adding concurrency to smalisca</title><link>http://blog.dornea.nu/2015/05/06/adding-concurrency-to-smalisca/</link><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/05/06/adding-concurrency-to-smalisca/</guid><description>When it comes to parallelism Python has some constraints which have to be taken into consideration before starting coding. I think the biggest one has to do with the Global Interpreter Lock which prevents several threads from executing Python bytecodes at once. Nevertheless you may want to apply concurrency patterns to you code in order to achieve more speed. Besides that you may want to use your cores properly otherwise you&amp;rsquo;ll end up like this:</description></item><item><title>gethostbyname vs. getaddrinfo</title><link>http://blog.dornea.nu/2015/04/30/gethostbyname-vs.-getaddrinfo/</link><pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/04/30/gethostbyname-vs.-getaddrinfo/</guid><description>After started coding in C again I&amp;rsquo;ve had a look at some basic network stuff like: socket(), connect() etc. In order to resolve domain names, one was used to use gethostbyname(). I&amp;rsquo;ve used this function in all my previous C projects but this one seems to be out-dated as the main page states:
The gethostbyname*(), gethostbyaddr*(), herror(), and hstrerror() functions are obsolete. Applications should use getaddrinfo(3), getnameinfo(3), and gai_strerror(3) instead. The really bad thing about gethostbyname is the fact that it doesn&amp;rsquo;t support IPv6.</description></item><item><title>Coming back to C/C++ after 2 years</title><link>http://blog.dornea.nu/2015/04/21/coming-back-to-c/c-after-2-years/</link><pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/04/21/coming-back-to-c/c-after-2-years/</guid><description>After years of python hacking and all kind of projects (like netgrafio or smalisca) I wanted to do more low-level stuff and refresh my C/C++ skills. I&amp;rsquo;ll try to describe how it feels like coming back to C/C++ after 2 years of coding abstinence.
It&amp;rsquo;s low.. Very low Having started a new project I didn&amp;rsquo;t feel like I&amp;rsquo;ve forgotten everything. It just felt strange to declare functions and use header files.</description></item><item><title>HowTo: iOS Apps - Static analysis</title><link>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</link><pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</guid><description>In this short article I&amp;rsquo;ll try to explain what are the main steps to analyze an iOS app. Since I&amp;rsquo;ve writen similar posts related to Android I thought I could devote some of spare time writing about the steps required to analyze iOS apps/binaries. But first of all let&amp;rsquo;s start with:
What&amp;rsquo;s an iOS app? In a nutshell here are the main characteristics:
Objective-C / C / C++ compiled (ARM) executable mostly encrypted using Apple&amp;rsquo;s Fairplay DRM it runs in a sandbox it&amp;rsquo;s installed by the user mobile apps come as an IPA file which is the counterpart to Android&amp;rsquo;s APK Now that you roughly know what an iOS app is let&amp;rsquo;s have a look at the most common blackbox pentesting tools out there.</description></item><item><title>On Java, OpenSSL, Crypto, Blowfish and stuff</title><link>http://blog.dornea.nu/2014/07/01/on-java-openssl-crypto-blowfish-and-stuff/</link><pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/07/01/on-java-openssl-crypto-blowfish-and-stuff/</guid><description>During some Android malware analysis I came along some Java routines which were meant to decrypt/encrypt some content. Nothing special about it. The key had to be extracted from a file and the encrypted file was in Base64. After unsuccessfully trying openssl in order to decrypt the file I decided to make some further investigations.
In this article I&amp;rsquo;ll have a look how Python, Java and openssl (command line utility) implement Blowfish in CBC mode.</description></item><item><title>Googles XSS Game - Solutions</title><link>http://blog.dornea.nu/2014/06/02/googles-xss-game-solutions/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/06/02/googles-xss-game-solutions/</guid><description>&lt;p>These are my steps how I&amp;rsquo;ve solved the &lt;a href="https://xss-game.appspot.com/">XSS Game&lt;/a>&lt;/p>
&lt;h2 id="level-1">Level 1&lt;/h2>
&lt;p>This is the most obvious and easiest one. Just insert following code and you&amp;rsquo;re done:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&amp;lt;script&amp;gt;alert(&lt;span style="color:#3677a9">1&lt;/span>)&amp;lt;&lt;span style="color:#a61717;background-color:#e3d2d2">/script&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="level-2">Level 2&lt;/h2>
&lt;p>Since the &lt;code>script&lt;/code> won&amp;rsquo;t work you&amp;rsquo;ll have to think of another tags to trigger JavaScript code execution. The first thing which came in mind was to use &lt;code>img&lt;/code> tags along with the &lt;code>onerror&lt;/code> attributes. Here you go:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&amp;lt;img src=&lt;span style="color:#ed9d13">&amp;#34;http://inexist.ent&amp;#34;&lt;/span> onerror=&lt;span style="color:#ed9d13">&amp;#34;javascript:alert(1)&amp;#34;&lt;/span>/&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>HowTo: Create docs with sphinx</title><link>http://blog.dornea.nu/2014/05/04/howto-create-docs-with-sphinx/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/05/04/howto-create-docs-with-sphinx/</guid><description>In this post I&amp;rsquo;d like to show some handy way to improve your process of documentating your project. Since we all know documentation is a must you might have wondered how to handle that without any big efforts. In fact it would be great if you could write your code along with the documentation and extract it later on for publishing.
Meet sphinx It is a tool that you&amp;rsquo;ll love! Being more technical:</description></item><item><title>Unfancy dashboard using matplotlib</title><link>http://blog.dornea.nu/2014/03/07/unfancy-dashboard-using-matplotlib/</link><pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/03/07/unfancy-dashboard-using-matplotlib/</guid><description>I was recently playing around with D3Â and discovered its dashboard posibilities.dashboarddude.comÂ has a nice compilation of really fancy dashboards (I was mainly interested in D3 but voila&amp;hellip; there are also other ways to do it).
Meanwhile I was remembered of old good IPython Notebook and its plotting features. This is what came out (You can find the code also on Github Gist: https://gist.github.com/dorneanu/9407737):
import datetime as dt import matplotlib.dates as mdates from mpl_toolkits.</description></item><item><title>Links of the Week #22</title><link>http://blog.dornea.nu/2013/12/20/links-of-the-week-#22/</link><pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2013/12/20/links-of-the-week-#22/</guid><description> Remote Code Execution exploit in WordPress 3.5.1
Dissection of Android malware MouaBad.P
Linux: Keep An Eye On Your System With Glances Monitor
DNA seen through the eyes of a coder
Infection of biological DNA with digital Computer Code
OpenBSD Exploit mitigation techniques
RSA Key Extraction via Low-Bandwidth Acoustic Cryptanalysis</description></item><item><title>Convert IP ranges to list</title><link>http://blog.dornea.nu/2013/12/04/convert-ip-ranges-to-list/</link><pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2013/12/04/convert-ip-ranges-to-list/</guid><description>If you got IP ranges in this layout: x.x.x.1-255, y.y.y.42-120 etc., you could easily use this code to generate full IP adresses without any ranges:
ips = &amp;#34;&amp;#34;&amp;#34; x.x.x.1-23 y.y.y.56-12 &amp;#34;&amp;#34;&amp;#34; buf = StringIO.StringIO(ips) while True: line = buf.readline() if line == &amp;#39;&amp;#39;: break else: import re m = re.search(&amp;#39;(.*)\.(.*)\.(.*)\.(.*)&amp;#39;, line) if m: ip_range = m.group(4).split(&amp;#39;-&amp;#39;) if len(ip_range) == 2: ip_addr = range(int(ip_range[0]), int(ip_range[1])+1) for i in ip_addr: print &amp;#34;%s.%s.%s.%s&amp;#34; % (m.</description></item><item><title>HowTo: Automate Burp using Burp Extender API</title><link>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</link><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</guid><description>I really love Burp. Since I use it on a daily basis I thought there might be some way to automate it. Usually I mainly do these steps to scan some URL:
Define scope Start manual exploring OR spider the URL in order to get some target map Activate passive scanning Activate live scanning Wait to the scan to finish Have a look at the results Save/export the results Well these are a lot of steps which have to be done manually.</description></item><item><title>Links of the Week #4</title><link>http://blog.dornea.nu/2013/06/07/links-of-the-week-#4/</link><pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2013/06/07/links-of-the-week-#4/</guid><description>How the Prime Meridian Changed the World: Not technical stuff but worth reading.
OpenSSH keys and the drunken bishop: Ever wondered about that visual fingerprint when generating SSH keys? Well this article brings some light on that. I&amp;rsquo;ve tried on my own and that&amp;rsquo;s fun: $ ssh -o VisualHostKey=yes victor@cia.gov -p 1337 Host key fingerprint is xxxxx +&amp;ndash;[ RSA 2048]&amp;mdash;-+ | .. | | . .. | | o .</description></item><item><title>OverTheWire: Vortex Level1</title><link>http://blog.dornea.nu/2013/05/03/overthewire-vortex-level1/</link><pubDate>Fri, 03 May 2013 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2013/05/03/overthewire-vortex-level1/</guid><description>Solution for http://www.overthewire.org/wargames/vortex/vortex1.shtml. Here&amp;rsquo;s the code they have used:
#include #include #include #include #define e(); if(((unsigned int)ptr &amp;amp; 0xff000000)==0xca000000) { setresuid(geteuid(), geteuid(), geteuid()); execlp(&amp;#34;/bin/sh&amp;#34;, &amp;#34;sh&amp;#34;, &amp;#34;-i&amp;#34;, NULL); } void print(unsigned char *buf, int len) { int i; printf(&amp;#34;[ &amp;#34;); for(i=0; i &amp;lt; len; i++) printf(&amp;#34;%x &amp;#34;, buf[i]); printf(&amp;#34; ]\n&amp;#34;); } int main() { unsigned char buf[512]; unsigned char *ptr = buf + (sizeof(buf)/2); unsigned int x; while((x = getchar()) !</description></item><item><title>OverTheWire: Vortex Level2</title><link>http://blog.dornea.nu/2013/05/02/overthewire-vortex-level2/</link><pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2013/05/02/overthewire-vortex-level2/</guid><description>Solution for level2:
Here is the code:
#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt; int main(int argc, char **argv) { char *args[] = { &amp;#34;/bin/tar&amp;#34;, &amp;#34;cf&amp;#34;, &amp;#34;/tmp/ownership.$$.tar&amp;#34;, argv[1], argv[2], argv[3] }; execv(args[0], args); } $$ expands to the process ID of the shell.
$ echo $$ 24489 Let&amp;rsquo;s make some observations:
vortex2@melissa:~$ ls -l /etc/vortex_pass/vortex3 -r-------- 1 vortex3 vortex3 10 2011-11-14 18:15 /etc/vortex_pass/vortex3 vortex2@melissa:~$ ls -l /vortex/vortex2 -r-sr-x--- 1 vortex3 vortex2 7134 2011-11-13 23:07 /vortex/vortex2 The password file is owned by vortex3.</description></item><item><title>Simple memory managment using linked lists (implement my_malloc and my_free)</title><link>http://blog.dornea.nu/2010/12/06/simple-memory-managment-using-linked-lists-implement-my_malloc-and-my_free/</link><pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2010/12/06/simple-memory-managment-using-linked-lists-implement-my_malloc-and-my_free/</guid><description>Suppose you were a Linux developer and you&amp;rsquo;re about to implement the well known system calls: malloc and free. How would you start? Which (already implemented) functions would you use? How would you organize your (free) memory? Which information would you like to have about certain memory regions? Those are the minimal problems you&amp;rsquo;re about to face with. What about memory fragmentation? Speaking of memory: How would you implement this thing called memory?</description></item><item><title>icmpKNOCK v0.2 released</title><link>http://blog.dornea.nu/2010/09/13/icmpknock-v0.2-released/</link><pubDate>Mon, 13 Sep 2010 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2010/09/13/icmpknock-v0.2-released/</guid><description>I&amp;rsquo;d like to announce the second main release of icmpKNOCK. I thought it was about time to release a new improved version. I&amp;rsquo;ve mainly focused on the actions mechanism and tried to implement some flexible way of defining actions, adding key pattern and setting payloads. Besides that I have managed it to install a SVN service in order to provide the latest development version of my current projects.
The CHANGELOG for this version isn&amp;rsquo;t quite long.</description></item><item><title>Drupals clean urls using Lighttpd: Moved from Lua to rewrite-once</title><link>http://blog.dornea.nu/2010/09/07/drupals-clean-urls-using-lighttpd-moved-from-lua-to-rewrite-once/</link><pubDate>Tue, 07 Sep 2010 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2010/09/07/drupals-clean-urls-using-lighttpd-moved-from-lua-to-rewrite-once/</guid><description>I&amp;rsquo;ve been using Lighttpd + Drupal for a long time. In order to have those sexy clean urls, you&amp;rsquo;ll have to do some rewrite stuff. A few months ago I found this Lua script, which served its purpose without any complications.
-- little helper function function file_exists(path) local attr = lighty.stat(path) if (attr) then return true else return false end end function removePrefix(str, prefix) return str:sub(1,#prefix+1) == prefix..&amp;#34;/&amp;#34; and str:sub(#prefix+2) end -- prefix without the trailing slash local prefix = &amp;#39;&amp;#39; -- the magic if (not file_exists(lighty.</description></item><item><title>Java? Without Eclipse? Eclim!</title><link>http://blog.dornea.nu/2010/06/05/java-without-eclipse-eclim/</link><pubDate>Sat, 05 Jun 2010 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2010/06/05/java-without-eclipse-eclim/</guid><description>I don&amp;rsquo;t really like bloated IDEs like Netbeans and Eclipse: Too much functionality, so you might get confused and frustrated. I rather use my one and only friend called vim: C, C++, Python, Assembler &amp;hellip; and now Java! What? Yes, it can be a pleasure to code Java in vim. Thanks to eclim your vim gets Eclipse functionality without starting/using Eclipse. In my opinion vim ist the best editor I&amp;rsquo;ve ever seen.</description></item><item><title>Birthday paradox/problem</title><link>http://blog.dornea.nu/2010/05/07/birthday-paradox/problem/</link><pubDate>Fri, 07 May 2010 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2010/05/07/birthday-paradox/problem/</guid><description>In probability theory, the birthday problem, or birthday paradox pertains to the probability that in a set of randomly chosen people some pair of them will have the same birthday. In a group of at least 23 randomly chosen people, there is more than 50% probability that some pair of them will have the same birthday. Such a result is counter-intuitive to many.
For 57 or more people, the probability is more than 99%, and it reaches 100% when, ignoring leap-years, the number of people reaches 366 (by the pigeonhole principle).</description></item><item><title>Some Drupal peculiarities</title><link>http://blog.dornea.nu/2009/09/15/some-drupal-peculiarities/</link><pubDate>Tue, 15 Sep 2009 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2009/09/15/some-drupal-peculiarities/</guid><description>Add Lightbox2 functionalities to WYSIWYG editor TinyMCE - who thought this would cost me about 6 hours of work? In fact that was the easiest part: I just followed the instructions on http://drupal.org/node/252153 and everything worked well! Before being able to do that, some upgrades were necessary. On http://drupal.org/project/tinymce I was told that the module was deprecated and replaced by the Wysiwyg API. So I had to remove the old TinyMCE module, install the new one and add at least one editor library as described on http://drupal.</description></item><item><title>OverTheWire: Vortex Level0</title><link>http://blog.dornea.nu/2009/05/21/overthewire-vortex-level0/</link><pubDate>Thu, 21 May 2009 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2009/05/21/overthewire-vortex-level0/</guid><description>So what&amp;rsquo;s this whole thing about? &amp;ldquo;The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of funfilled games.&amp;rdquo; by OverTheWire.org. So I started with Vortex and coded an example how to read 4 integers from server, sum them up, send result to server and get the login information back from server again. Sounds quite simple. I admit I had to refresh my knowledge about linux socket programming and go through some coding examples.</description></item><item><title>Turn VIM into your favourite IDE</title><link>http://blog.dornea.nu/2009/04/24/turn-vim-into-your-favourite-ide/</link><pubDate>Fri, 24 Apr 2009 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2009/04/24/turn-vim-into-your-favourite-ide/</guid><description>Before you start reading this I&amp;rsquo;d recommand you to ask your best friend Google™ for the most common (platform independent) IDEs (Integrated Development Environment). If you want some top 10 of most featured/used/known/whatever IDEs go to Wikipedia and satisfy your needs. So don&amp;rsquo;t get me wrong: This article is NOT supposed to give you some comparison nor to influence your oppinion. I&amp;rsquo;ll just satisfy MY needs and give you some kind of reviews in using VIMfor complex projects and daily coding tasks.</description></item><item><title>Why use Python? The n00b mini-review</title><link>http://blog.dornea.nu/2009/04/07/why-use-python-the-n00b-mini-review/</link><pubDate>Tue, 07 Apr 2009 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2009/04/07/why-use-python-the-n00b-mini-review/</guid><description>I&amp;rsquo;ve been coding Python for almost one week. I really thank O&amp;rsquo;Reilly for their good quality and well structured books. If you ever plan to learn Python, just have a look at &amp;ldquo;Learning Python - 3rd Edition&amp;rdquo; by Mark Lutz. You&amp;rsquo;ll love it! And you&amp;rsquo;ll really get impressed and fascinated by Pythons vast functionalities like I did.
So what&amp;rsquo;s the big thing about Python? Well to be honest my answer is simply: Because it&amp;rsquo;s damn cool.</description></item><item><title>HowTo: Get SETOF from Array in PostgreSQL</title><link>http://blog.dornea.nu/2009/03/30/howto-get-setof-from-array-in-postgresql/</link><pubDate>Mon, 30 Mar 2009 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2009/03/30/howto-get-setof-from-array-in-postgresql/</guid><description>The use of so called &amp;ldquo;procedural languages&amp;rdquo; in PostgreSQL allows the user to write user-defined functions in other languages than SQL or C. Since every query is sent to the server, the database server has to know how to interpret and handle function statements. As the PostgreSQL documentation describes, the function handler itself is a C language function compiled into a shared object and loaded on demand. All you have to do is to install the language into your database.</description></item><item><title>Mod2Exec - Execute modules</title><link>http://blog.dornea.nu/2008/11/26/mod2exec-execute-modules/</link><pubDate>Wed, 26 Nov 2008 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2008/11/26/mod2exec-execute-modules/</guid><description>Einleitung Wir leben in einer Zeit, in der Dynamik sowie Flexibilität eine große Rolle spielen. Wir alle besitzen bestimmte Fähigkeiten, die in bestimmten Situationen zum Einsatz kommen können. Das heißt, der Mensch braucht diese nur zur richtigen Zeit „aufzurufen“. Genauso soll ein Kernel, das Herzstück eines Betriebssystems, auch funktionieren: Die aktuelle
Systemkonfiguration wird überprüft und Module werden hochgeladen. Damit werden dem Kernel Schnittstellen zur Verfügung gestellt, die zur Steuerung der Hardware etc.</description></item></channel></rss>