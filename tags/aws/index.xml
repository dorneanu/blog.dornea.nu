<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/aws/</link>
    <description>Recent content in aws on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0200</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS</title>
      <link>http://blog.dornea.nu/notes/aws/</link>
      <pubDate>Fri, 26 Feb 2021 11:12:15 +0100</pubDate>
      
      <guid>http://blog.dornea.nu/notes/aws/</guid>
      <description>AMI aws cli Some currated list of useful aws CLI commands.
  API Gateway
   desc command     get-domain-names $ aws apigatewayv2 get-domain-names      SSM
   desc command     get parameter $ aws --profile default ssm get-parameter --with-decryption --name &amp;quot;&amp;lt;ssm path&amp;gt;&amp;quot;   put parameter $ aws ssm put-parameter --name &amp;lt;path&amp;gt; --value &amp;lt;value&amp;gt; --type SecureString --key-id &amp;lt;KMS key ID&amp;gt;      Cloudformation</description>
    </item>
    
    <item>
      <title>Implement an access key rotator</title>
      <link>http://blog.dornea.nu/2021/04/25/implement-an-access-key-rotator/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0200</pubDate>
      
      <guid>http://blog.dornea.nu/2021/04/25/implement-an-access-key-rotator/</guid>
      <description>Introduction With the recent success of Github actions you can automate lots of things whenever something in your repos changes, e.g. automatically generate static HTML content (using hugo) and push it to some repository for which GitHub Pages has been configured. Check this awesome actions list for more use cases.
Using encrypted secrets defined either per repository or organization, you can bring your Github workflow to the next level: Authenticate against APIs, login to different services while keeping your secrets/credentials away from your repositories.</description>
    </item>
    
    <item>
      <title>AWS Summit in Berlin 2016</title>
      <link>http://blog.dornea.nu/2016/04/12/aws-summit-in-berlin-2016/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/04/12/aws-summit-in-berlin-2016/</guid>
      <description>For the first time I&amp;rsquo;ve attended the AWS Summit in Berlin which against my expectations was very interesting. Not having much in common with AWS (at least not yet), from a security perspective the cloud still remains a very neglected threat to companies. As we all know there is some &amp;ldquo;rain&amp;rdquo; coming down from the cloud from time to time. And by &amp;ldquo;rain&amp;rdquo; I mean sensitive data which gets exposed due to misconfigured APIs, weak credentials or insecure applications.</description>
    </item>
    
  </channel>
</rss>
