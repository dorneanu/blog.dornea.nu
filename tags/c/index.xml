<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/c/</link>
    <description>Recent content in c on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Sep 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ringzer0 CTF - Jail Escaping C </title>
      <link>http://blog.dornea.nu/2016/09/19/ringzer0-ctf-jail-escaping-c/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/09/19/ringzer0-ctf-jail-escaping-c/</guid>
      <description>Here are my solutions for the ringzer0 Jail Escaping C challenges:
 Level 1: https://ringzer0team.com/challenges/228 Level 2: https://ringzer0team.com/challenges/229 Level 3: https://ringzer0team.com/challenges/230  Level 1 level1@ringzer0team.com&amp;#39;s password: Last login: Sun Apr 24 05:48:42 2016 from RingZer0 Team Online CTF C Jail Level 1: Current user is uid=1000(level1) gid=1000(level1) groups=1000(level1) Flag is located at /home/level1/flag.txt Challenge instruction: ----------------------------- Type DONE to compile and execute your binary. Your payload will be compiled that way: gcc -O3 -Wall -fstack-protector-all -fPIE bin.</description>
    </item>
    
    <item>
      <title>Testing shellcodes</title>
      <link>http://blog.dornea.nu/2016/08/23/testing-shellcodes/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/08/23/testing-shellcodes/</guid>
      <description>While playing some wargames where I had to read a file called flag.txt using C code, one possible solution (unfortunately not the right one) was to use shellcodes to read the file and dump its content. Here are my notes for future use.
BITS 64 ; Author Mr.Un1k0d3r - RingZer0 Team ; Read /etc/passwd Linux x86_64 Shellcode ; Shellcode size 82 bytes global _start section .text _start: jmp _push_filename _readfile: ; syscall open file pop rdi ; pop path value ; NULL byte fix xor byte [rdi + 11], 0x41 xor rax, rax add al, 2 xor rsi, rsi ; set O_RDONLY flag syscall ; syscall read file sub sp, 0xfff lea rsi, [rsp] mov rdi, rax xor rdx, rdx mov dx, 0xfff; size to read xor rax, rax syscall ; syscall write to stdout xor rdi, rdi add dil, 1 ; set stdout fd = 1 mov rdx, rax xor rax, rax add al, 1 syscall ; syscall exit xor rax, rax add al, 60 syscall _push_filename: call _readfile path: db &amp;#34;flag.</description>
    </item>
    
    <item>
      <title>Debugging Android native shared libraries</title>
      <link>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</guid>
      <description>Since I haven&amp;rsquo;t done this before, I thought I could share some experiences with you. All this began during some APK analysis which was heavily using JNIs. In my particular case Java Native Interfaces were used to call functions inside libraries written in C/C++. At that time I was quite unfamiliar with JNIs and how they actually work. Besides that I haven&amp;rsquo;t debugged any native applications/libraries on Android before. So this was the perfect opportunity to have a closer look at Android NDK and its debugging features.</description>
    </item>
    
    <item>
      <title>gethostbyname vs. getaddrinfo</title>
      <link>http://blog.dornea.nu/2015/04/30/gethostbyname-vs.-getaddrinfo/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/04/30/gethostbyname-vs.-getaddrinfo/</guid>
      <description>After started coding in C again I&amp;rsquo;ve had a look at some basic network stuff like: socket(), connect() etc. In order to resolve domain names, one was used to use gethostbyname(). I&amp;rsquo;ve used this function in all my previous C projects but this one seems to be out-dated as the main page states:
The gethostbyname*(), gethostbyaddr*(), herror(), and hstrerror() functions are obsolete. Applications should use getaddrinfo(3), getnameinfo(3), and gai_strerror(3) instead.  The really bad thing about gethostbyname is the fact that it doesn&amp;rsquo;t support IPv6.</description>
    </item>
    
    <item>
      <title>Coming back to C/C&#43;&#43; after 2 years</title>
      <link>http://blog.dornea.nu/2015/04/21/coming-back-to-c/c-after-2-years/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/04/21/coming-back-to-c/c-after-2-years/</guid>
      <description>After years of python hacking and all kind of projects (like netgrafio or smalisca) I wanted to do more low-level stuff and refresh my C/C++ skills. I&amp;rsquo;ll try to describe how it feels like coming back to C/C++ after 2 years of coding abstinence.
It&amp;rsquo;s low.. Very low Having started a new project I didn&amp;rsquo;t feel like I&amp;rsquo;ve forgotten everything. It just felt strange to declare functions and use header files.</description>
    </item>
    
    <item>
      <title>Links of the Week 3</title>
      <link>http://blog.dornea.nu/2013/05/31/links-of-the-week-3/</link>
      <pubDate>Fri, 31 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/05/31/links-of-the-week-3/</guid>
      <description>Anatomy of a hack: How crackers ransack passwords like qeadzcwrsfxv1331 This is definetely link of the month! I never had to crack hashes in my life but this article is way the best introduction to the cracking/brute-forcing techniques. This is a must for all crackers out there (Thanks Marcin for the link). Yes, disassemble with Javap ALL OVER THE PLACE! Hacking Java Bytecode for Programmers (Part3): If the site is down check out this link.</description>
    </item>
    
    <item>
      <title>Simple memory managment using linked lists (implement my_malloc and my_free)</title>
      <link>http://blog.dornea.nu/2010/12/06/simple-memory-managment-using-linked-lists-implement-my_malloc-and-my_free/</link>
      <pubDate>Mon, 06 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/12/06/simple-memory-managment-using-linked-lists-implement-my_malloc-and-my_free/</guid>
      <description>Suppose you were a Linux developer and you&amp;rsquo;re about to implement the well known system calls:Â malloc and free. How would you start? Which (already implemented) functions would you use? How would you organize your (free) memory? Which information would you like to have about certain memory regions? Those are the minimal problems you&amp;rsquo;re about to face with. What about memory fragmentation? Speaking of memory: How would you implement this thing called memory?</description>
    </item>
    
    <item>
      <title>OverTheWire: Vortex Level0</title>
      <link>http://blog.dornea.nu/2009/05/21/overthewire-vortex-level0/</link>
      <pubDate>Thu, 21 May 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/05/21/overthewire-vortex-level0/</guid>
      <description>So what&amp;rsquo;s this whole thing about? &amp;ldquo;The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of funfilled games.&amp;rdquo; by OverTheWire.org. So I started with Vortex and coded an example how to read 4 integers from server, sum them up, send result to server and get the login information back from server again. Sounds quite simple. I admit I had to refresh my knowledge about linux socket programming and go through some coding examples.</description>
    </item>
    
  </channel>
</rss>
