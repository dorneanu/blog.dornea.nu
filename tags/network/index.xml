<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on blog.dornea.nu</title><link>http://blog.dornea.nu/tags/network/</link><description>Recent content in network on blog.dornea.nu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>Decode Adobe Flex AMF protocol</title><link>http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/</link><pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/</guid><description>If you ever had the opportunity to pentest Flash applications you might have had problems analyzing the traffic between the client and the backend. An increasing number of (web) applications is using Adobe Flex at the presentation layer which uses the ActionScript Message Format (AMF) to send data back and forth. One might think that Burp has already built-in decoding functionalities for AMF. Although this is the case I found Burp&amp;rsquo;s decoding to be more confusing than useful.</description></item><item><title>Android remote sniffing using Tcpdump, nc and Wireshark</title><link>http://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/</link><pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/</guid><description>If you want to sniff your devices traffic and visualize it on Wireshark, you&amp;rsquo;ll need:
tcpdump netcat wireshark/tshark Make sure you have tcpdump installed on your machine. I highly recommend you installing the Debian Kit which I&amp;rsquo;ve been using for years now. It makes things less complicated. Once you have done that, log in to your Android device and switch to the Debian environment:
victor@delia:/$ adb shell # deb root@debian:/# Now you can start tcpdump and pipe its output to netcat:</description></item><item><title>Redirect Androids traffic to Burp</title><link>http://blog.dornea.nu/2015/02/19/redirect-androids-traffic-to-burp/</link><pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/02/19/redirect-androids-traffic-to-burp/</guid><description>If you want to redirect you Android devices traffic to your Burp instance, you&amp;rsquo;ll just have to use DNAT and MASQUERADING. I was more detailed about this topic in this post. And since the Internet is full of misleading information these are the steps to get it working. A small side remark: Most articles show you how to route the devices traffic through another machine (hosting the Burp instance). In that case one could:</description></item></channel></rss>