<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iptables on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/iptables/</link>
    <description>Recent content in iptables on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/iptables/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>No DNAT to localhost</title>
      <link>http://blog.dornea.nu/notes/no-dnat-to-localhost/</link>
      <pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/notes/no-dnat-to-localhost/</guid>
      <description>Doing a simple port forwarding is actually a simple task:
$ iptables -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080 This would redirect all traffic from 80 to 8080. But if you have some firewall activated, you&amp;rsquo;ll have to allow both ports:
$ iptables -A INPUT -p tcp --dport 80 -j ALLOW $ iptables -A INPUT -p tcp --dport 8080 -j ALLOW Otherwise the port forwarding won&amp;rsquo;t work. But this is not the use case you want to achieve.</description>
    </item>
    
    <item>
      <title>OpenVPN for paranoids </title>
      <link>http://blog.dornea.nu/2015/11/17/openvpn-for-paranoids/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/11/17/openvpn-for-paranoids/</guid>
      <description>Continuing my admin series this time I&amp;rsquo;d like to setup a VPN using OpenVPN  as user-based VPN solution. Unlike IPSec solutions which require IPSec on both (server and client) sides, securing the VPN tunnel by OpenSSL is a more preferable option.
In this post I&amp;rsquo;ll try to show which steps have to be taken in order to:
 secure the communication channel use up-to-date (and secure!) TLS configurations prevent information leaks when the VPN tunnel is down  At least for the last one some additional steps are required to route your traffic only through the VPN tunnel.</description>
    </item>
    
    <item>
      <title>Redirect Androids traffic to Burp</title>
      <link>http://blog.dornea.nu/notes/redirect-androids-traffic-to-burp/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/notes/redirect-androids-traffic-to-burp/</guid>
      <description>If you want to redirect you Android devices traffic to your Burp instance, you&amp;rsquo;ll just have to use DNAT and MASQUERADING. I was more detailed about this topic in this post. And since the Internet is full of misleading information these are the steps to get it working. A small side remark: Most articles show you how to route the devices traffic through another machine (hosting the Burp instance). In that case one could:</description>
    </item>
    
    <item>
      <title>HowTo: Proxy Non-Proxy-Aware Android Applications through Burp</title>
      <link>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</guid>
      <description>Proxying HTTP(s) traffic from Android devices through Burp should be actually no magic. Nevertheless you&amp;rsquo;ll have to take some important steps into consideration:
  Install Burps CA cert on the device
 I usually access Burp directly and download the cert file (cacert.crt) If Burp is listening on 192.168.1.1:8080, just go to http://192.168.1.1:8080/cert to download the cert Push this file to your device and install the certificate    Install ProxyDroid on Android</description>
    </item>
    
    <item>
      <title>HowTo: Androguard with Docker</title>
      <link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid>
      <description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump/</guid>
      <description>For better display results you can also have a look at the 24h Android Monitoring Jupyter Notebook.
 Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is ending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long.</description>
    </item>
    
    <item>
      <title>24h Android sniffing using tcpdump - IPython Notebook Version</title>
      <link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</guid>
      <description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is sending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description>
    </item>
    
    <item>
      <title>Block facebook with iptables on OpenWrt</title>
      <link>http://blog.dornea.nu/2011/04/02/block-facebook-with-iptables-on-openwrt/</link>
      <pubDate>Sat, 02 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/04/02/block-facebook-with-iptables-on-openwrt/</guid>
      <description>Say NO to facebook and add these lines to /etc/firewall.user
# This file is interpreted as shell script. # Put your custom $IPT rules here, they will # be executed with each firewall (re-)start. IPT=iptables NET_LAN=192.168.0.0/16 ... # facebook $IPT -I FORWARD -p tcp -m iprange --dst-range 66.220.144.0-66.220.159.255 --dport 443 -j DROP $IPT -I FORWARD -p tcp -m iprange --dst-range 69.63.176.0-69.63.191.255 --dport 443 -j DROP $IPT -I FORWARD -p tcp -m iprange --dst-range 204.</description>
    </item>
    
    <item>
      <title>My own cheap NAS - the OpenWRT way</title>
      <link>http://blog.dornea.nu/2011/03/19/my-own-cheap-nas-the-openwrt-way/</link>
      <pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/03/19/my-own-cheap-nas-the-openwrt-way/</guid>
      <description>Introducing my TP-Link TL-WR1043ND:
Summary  OS: Linux OpenWrt 2.6.32.25 #1 Fri Nov 19 20:27:50 PST 2010 mips GNU/Linux CPU: system type : Atheros AR9132 rev 2 machine : TP-LINK TL-WR1043ND processor : 0 cpu model : MIPS 24Kc V7.4  Filesystems root@OpenWrt:~# df -Ph Filesystem Size Used Available Capacity Mounted on /dev/root 2.1M 2.1M 0 100% /rom tmpfs 14.4M 232.0K 14.2M 2% /tmp tmpfs 512.0K 0 512.0K 0% /dev /dev/sda1 1.</description>
    </item>
    
    <item>
      <title>HowTo: SNAT/IP Masquerade between 2 wlan cards on Linux</title>
      <link>http://blog.dornea.nu/2010/11/25/howto-snat/ip-masquerade-between-2-wlan-cards-on-linux/</link>
      <pubDate>Thu, 25 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/11/25/howto-snat/ip-masquerade-between-2-wlan-cards-on-linux/</guid>
      <description>Although this is a quite minimalistic howto you should be able to do IP masquerading between your WLAN cards in less than 2 minutes. As I posted here I&amp;rsquo;d like to share use my WLAN cards to share one cards Internet connection with the other one. The following steps don&amp;rsquo;t apply only to wifi cards. The same commands should work on Ethernet cards too. Let&amp;rsquo;s start&amp;hellip;
The Big picture As you see you have 2 networks:</description>
    </item>
    
  </channel>
</rss>
