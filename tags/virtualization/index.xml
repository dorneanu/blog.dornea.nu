<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>virtualization on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/virtualization/</link>
    <description>Recent content in virtualization on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Mar 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/virtualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenBSD, FreeBSD, NetBSD &amp;#8211; I do love beasts!</title>
      <link>http://blog.dornea.nu/2011/03/21/openbsd-freebsd-netbsd-#8211-i-do-love-beasts/</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/03/21/openbsd-freebsd-netbsd-#8211-i-do-love-beasts/</guid>
      <description>&lt;p&gt;It all starts with virtualisation! Since there is no BSD at all on my laptop, I thought I should give the most important ones a chance: FreeBSD, OpenBSD and NetBSD. Although there were several rumours afloat – related to complexity factors (installation, configuration etc.) – I had absolutely no problem setting up *BSD with X11(!!!). Besides that I had a look at the packaging systems provided within each BSD. My conclusion: They are pretty much the same: &lt;strong&gt;make install&lt;/strong&gt; and basta. Here some screenshots:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HowTo: Create new Debian domU using Xen on *BSD</title>
      <link>http://blog.dornea.nu/2010/03/22/howto-create-new-debian-domu-using-xen-on-bsd/</link>
      <pubDate>Mon, 22 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/03/22/howto-create-new-debian-domu-using-xen-on-bsd/</guid>
      <description>In this tutorial you&amp;rsquo;ll get detailed information how to setup a fully functionable Debian Lenny system using virtualization software Xen. This entry was written due to high frustration caused by unreliable/outdated articles on the Internet and uncompleted tutorials. This here should be an attempt to describe the installation process completely and provide additional information which might help you solve common problems. The domU system we&amp;rsquo;d like to setup (in our case Debian) provides a neat netboot installer which supports Xen.</description>
    </item>
    
    <item>
      <title>HowTo: Qemu networking on NetBSD</title>
      <link>http://blog.dornea.nu/2010/03/01/howto-qemu-networking-on-netbsd/</link>
      <pubDate>Mon, 01 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/03/01/howto-qemu-networking-on-netbsd/</guid>
      <description>In this tutorial I&amp;rsquo;d like to give you some useful examples how to configure network when using Qemu as virtualization machine. The videos in this HowTo were taken on a NetBSD-5_STABLE/amd64 machine using Qemu 0.11.1. **Attention: **On my system I&amp;rsquo;ve used a patched version of Qemu as reported here. However you can use the fd= option to specify an open socket to be used. Example:
$ qemu -cdrom [iso file] -net nic -net tap,fd=3 3&amp;lt;&amp;gt;/dev/tap0 Using this example `tap0″ should be created before the qemu command.</description>
    </item>
    
    <item>
      <title>NetBSD, Linux &amp;#038; Xen - Does it work?</title>
      <link>http://blog.dornea.nu/2009/11/14/netbsd-linux-#038-xen-does-it-work/</link>
      <pubDate>Sat, 14 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/11/14/netbsd-linux-#038-xen-does-it-work/</guid>
      <description>In this article I&amp;rsquo;d like to share my impressions I made with Xen during the last weeks. I met Xen a few months ago but due to general lack of interest I didn&amp;rsquo;t have the chance to give it a try.Para-virtualization - why bother at all? There were actually no significant reasons why I should use virtualization. But then it started with this thread, followed by this one. The really fascinating - and tough quite useful - aspect of virtualization consists of the hardware access policy which is implemented by the virtualization host.</description>
    </item>
    
  </channel>
</rss>
