<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>howto on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/howto/</link>
    <description>Recent content in howto on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HowTo: Proxy Non-Proxy-Aware Android Applications through Burp</title>
      <link>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</guid>
      <description>Proxying HTTP(s) traffic from Android devices through Burp should be actually no magic. Nevertheless you&amp;rsquo;ll have to take some important steps into consideration:
  Install Burps CA cert on the device
 I usually access Burp directly and download the cert file (cacert.crt) If Burp is listening on 192.168.1.1:8080, just go to http://192.168.1.1:8080/cert to download the cert Push this file to your device and install the certificate    Install ProxyDroid on Android</description>
    </item>
    
    <item>
      <title>HowTo: iOS Apps - Static analysis</title>
      <link>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/10/29/howto-ios-apps-static-analysis/</guid>
      <description>In this short article I&amp;rsquo;ll try to explain what are the main steps to analyze an iOS app. Since I&amp;rsquo;ve writen similar posts related to Android I thought I could devote some of spare time writing about the steps required to analyze iOS apps/binaries. But first of all let&amp;rsquo;s start with:
What&amp;rsquo;s an iOS app? In a nutshell here are the main characteristics:
 Objective-C / C / C++ compiled (ARM) executable mostly encrypted using Apple&amp;rsquo;s Fairplay DRM it runs in a sandbox it&amp;rsquo;s installed by the user mobile apps come as an IPA file which is the counterpart to Android&amp;rsquo;s APK  Now that you roughly know what an iOS app is let&amp;rsquo;s have a look at the most common blackbox pentesting tools out there.</description>
    </item>
    
    <item>
      <title>HowTo: Androguard with Docker</title>
      <link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid>
      <description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description>
    </item>
    
    <item>
      <title>HowTo: Debug Android APKs with Eclipse and DDMS</title>
      <link>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/</guid>
      <description>Simply out of necessity I&amp;rsquo;ve written this mini-tutorial how debug android APKs using Eclipse and DDMS. After hours of wild googling these are the steps to make your APK debuggable under Eclipse. I&amp;rsquo;ll be using the FakeBanker APK reverse-engineered in previous articles.
Revisions  UPDATE 2014-12-09:  Before looking at the next steps, make sure you&amp;rsquo;ll have a look at ADUS. It will help you with the automation of several steps described in this post.</description>
    </item>
    
    <item>
      <title>HowTo: Create docs with sphinx</title>
      <link>http://blog.dornea.nu/2014/05/04/howto-create-docs-with-sphinx/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/05/04/howto-create-docs-with-sphinx/</guid>
      <description>In this post I&amp;rsquo;d like to show some handy way to improve your process of documentating your project. Since we all know documentation is a must you might have wondered how to handle that without any big efforts. In fact it would be great if you could write your code along with the documentation and extract it later on for publishing.
Meet sphinx It is a tool that you&amp;rsquo;ll love! Being more technical:</description>
    </item>
    
    <item>
      <title>HowTo: Automate nmap scanning</title>
      <link>http://blog.dornea.nu/2013/09/13/howto-automate-nmap-scanning/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/09/13/howto-automate-nmap-scanning/</guid>
      <description>Recently a colleague of mine at nullsecurity.net released a new scanning tool called wnmap. Basically it&amp;rsquo;s a wrapper around nmap which helps automating the scanning process by using simple configuration files. Let&amp;rsquo;s have a look at it..
Configuration Make sure you you have downloaded the archive and open src/core/wnmap.conf in order to edit:
 the wnmap path editor preferences global parameters (to use in every scan)  Running the tool Now the obligatory -help message:</description>
    </item>
    
    <item>
      <title>HowTo: Automate Burp using Burp Extender API</title>
      <link>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</guid>
      <description>I really love Burp. Since I use it on a daily basis I thought there might be some way to automate it. Usually I mainly do these steps to scan some URL:
 Define scope Start manual exploring OR spider the URL in order to get some target map Activate passive scanning Activate live scanning Wait to the scan to finish Have a look at the results Save/export the results  Well these are a lot of steps which have to be done manually.</description>
    </item>
    
    <item>
      <title>HowTo: Root your Kindle 3</title>
      <link>http://blog.dornea.nu/2013/07/03/howto-root-your-kindle-3/</link>
      <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/07/03/howto-root-your-kindle-3/</guid>
      <description>As I&amp;rsquo;m using my Kindle 3 on daily basis I wanted to go behind the limits and check for some new features. As an entry point to the whole topic I highly recommend you K3_Index. This is what I did:
Step 1: Jailbreak Download the files from http://www.mobileread.com/forums/showthread.php?t=88004. In my case I&amp;rsquo;ve used update_jailbreak_0.11.N_k3w_install.bin. Copy this file to your Kindle, unplug it from the PC and run: [HOME] -&amp;gt; [MENU] &amp;gt; Settings -&amp;gt; [MENU] &amp;gt; Update YourÂ Kindle.</description>
    </item>
    
    <item>
      <title>HowTo: Have a web performance boost with Nginx</title>
      <link>http://blog.dornea.nu/2012/01/26/howto-have-a-web-performance-boost-with-nginx/</link>
      <pubDate>Thu, 26 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2012/01/26/howto-have-a-web-performance-boost-with-nginx/</guid>
      <description>Why Nginx? Since I wanted to improve my sites load speed I thought I should look around for some lighttpd-alternatives which I have used for so many years. The really annoying thing about lighttpd is its configuration syntax. I don&amp;rsquo;t think it&amp;rsquo;s comprehensive nor easy to learn. Besides that I wanted to have a configuration where memcahed plays a major role: Serve static content (html) from memcache. Lighttpd does have some modules/tutorials how to interact with memcached but I couldn&amp;rsquo;t find any working configuration.</description>
    </item>
    
    <item>
      <title>HowTo: Redmine, Lighttpd with Debian</title>
      <link>http://blog.dornea.nu/2011/11/07/howto-redmine-lighttpd-with-debian/</link>
      <pubDate>Mon, 07 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/11/07/howto-redmine-lighttpd-with-debian/</guid>
      <description>I&amp;rsquo;ll just post my lighttpd.conf. The rest can be easily found on the Internet.
$HTTP[&amp;#34;host&amp;#34;] =~ &amp;#34;^dev.dornea.nu$&amp;#34; { evhost.path-pattern = &amp;#34;/home/redmine/current/public&amp;#34; server.follow-symlink = &amp;#34;enable&amp;#34; server.indexfiles = ( &amp;#34;dispatch.fcgi&amp;#34; ) server.error-handler-404 = &amp;#34;/dispatch.fcgi&amp;#34; #dir-listing.activate = &amp;#34;enable&amp;#34; url.rewrite-once = ( &amp;#34;^/(.*..+(?!html))$&amp;#34; =&amp;amp;gt; &amp;#34;$0&amp;#34;, &amp;#34;^/(.*).(.*)&amp;#34; =&amp;amp;gt; &amp;#34;$0&amp;#34;, ) fastcgi.server = ( &amp;#34;.fcgi&amp;#34; =&amp;amp;gt; ( &amp;#34;redmine&amp;#34; =&amp;amp;gt; ( &amp;#34;min-procs&amp;#34; =&amp;amp;gt; 1, &amp;#34;max-procs&amp;#34; =&amp;amp;gt; 5, &amp;#34;socket&amp;#34; =&amp;amp;gt; &amp;#34;/tmp/redmine.socket&amp;#34;, &amp;#34;bin-path&amp;#34; =&amp;amp;gt; &amp;#34;/usr/bin/ruby /home/redmine/current/public/dispatch.fcgi&amp;#34;, &amp;#34;bin-environment&amp;#34; =&amp;amp;gt; ( &amp;#34;RAILS_ENV&amp;#34; =&amp;amp;gt; &amp;#34;production&amp;#34; ) ) ) ) } My redmine installation can be found under /home/redmine/current</description>
    </item>
    
    <item>
      <title>HowTo: Keep your passwords safe using SQLite and SQLCipher</title>
      <link>http://blog.dornea.nu/2011/07/28/howto-keep-your-passwords-safe-using-sqlite-and-sqlcipher/</link>
      <pubDate>Thu, 28 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/07/28/howto-keep-your-passwords-safe-using-sqlite-and-sqlcipher/</guid>
      <description>I was recently doing some hacks and realized that there must be a way to store gained information in a secure manner. I usually encrypt sensitive information (like passwords, accounts etc.) using GPG. But that&amp;rsquo;s quite unhandy: You always need your private key and the encrypted data is stored unencrypted on the device (unless you&amp;rsquo;re using full disk encryption which shouldn&amp;rsquo;t be a problem since data is stored encrypted on the device).</description>
    </item>
    
    <item>
      <title>HowTo: Convert MTS to MKV using tsMuxeR and ffmpeg</title>
      <link>http://blog.dornea.nu/2011/06/28/howto-convert-mts-to-mkv-using-tsmuxer-and-ffmpeg/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/06/28/howto-convert-mts-to-mkv-using-tsmuxer-and-ffmpeg/</guid>
      <description>Since I wasn&amp;rsquo;t able to find any acceptable Howto, I thought I&amp;rsquo;d write my own one.
Initial situation I have some videos taken with my Panasonic Lumix DMC-TZ10 in AVCHD Lite format (MTS). All I want to do is to convert these files into some more handy format like MKV (Matroska).
Demuxing I&amp;rsquo;ve used tsMuxeR from SmartLabs to demux the files. Here&amp;rsquo;s what I did:
Now you should have following files on your disk:</description>
    </item>
    
    <item>
      <title>VNC: Connect to current desktop session using x11vnc and ssh</title>
      <link>http://blog.dornea.nu/2011/04/04/vnc-connect-to-current-desktop-session-using-x11vnc-and-ssh/</link>
      <pubDate>Mon, 04 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/04/04/vnc-connect-to-current-desktop-session-using-x11vnc-and-ssh/</guid>
      <description>x11vnc allows you to connect to real X displays without creating any new X session (fluxbox, twm, gnome etc.). It allows you to control the mouse, keyboard and X events remotely. I usually use it when friends of mine need help and I want to see what exactly they&amp;rsquo;re doing.
Make sure any **ssh server **is running on remote-hostand you have a vnc client installed on your localhost. Also make sure remote-host has x11vnc otherwise this won&amp;rsquo;t make sense at all.</description>
    </item>
    
    <item>
      <title>My own cheap NAS - the OpenWRT way</title>
      <link>http://blog.dornea.nu/2011/03/19/my-own-cheap-nas-the-openwrt-way/</link>
      <pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/03/19/my-own-cheap-nas-the-openwrt-way/</guid>
      <description>Introducing my TP-Link TL-WR1043ND:
Summary  OS: Linux OpenWrt 2.6.32.25 #1 Fri Nov 19 20:27:50 PST 2010 mips GNU/Linux CPU: system type : Atheros AR9132 rev 2 machine : TP-LINK TL-WR1043ND processor : 0 cpu model : MIPS 24Kc V7.4  Filesystems root@OpenWrt:~# df -Ph Filesystem Size Used Available Capacity Mounted on /dev/root 2.1M 2.1M 0 100% /rom tmpfs 14.4M 232.0K 14.2M 2% /tmp tmpfs 512.0K 0 512.0K 0% /dev /dev/sda1 1.</description>
    </item>
    
    <item>
      <title>HowTo: Full-Encrypt data using Gentoo,Luks and initramfs</title>
      <link>http://blog.dornea.nu/2011/03/07/howto-full-encrypt-data-using-gentooluks-and-initramfs/</link>
      <pubDate>Mon, 07 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2011/03/07/howto-full-encrypt-data-using-gentooluks-and-initramfs/</guid>
      <description>Since last post many things have changed. No more NetBSD on my laptop (this has to do with several things, I&amp;rsquo;ll write about in a future post): I had to fall in love with Gentoo! I&amp;rsquo;ll try to give you some quick overview related to this posts title: Encryption under Gentoo using Luks.
There are serveral (good!) tutorials out there. Among these I&amp;rsquo;ve used:
&amp;lt;td&amp;gt; There you&#39;ll get a lot of information related to the topic.</description>
    </item>
    
    <item>
      <title>HowTo: Secure your server using icmpKNOCK</title>
      <link>http://blog.dornea.nu/2010/10/03/howto-secure-your-server-using-icmpknock/</link>
      <pubDate>Sun, 03 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/10/03/howto-secure-your-server-using-icmpknock/</guid>
      <description>This time I&amp;rsquo;d like to give you a short usage description of icmpKNOCK that was recently released. The main reason I wrote it was lack of security measurements on my boxes. I didn&amp;rsquo;t want any sophisticated IDS tools nor complicated monitoring services. I wanted to implement something which will run on (almost) any platform without any external toolsb. Since the ping utility is available on most modern systems using ICMP packets to communicate with the server was the most reasonable approach.</description>
    </item>
    
    <item>
      <title>HowTo: Create new Debian domU using Xen on *BSD</title>
      <link>http://blog.dornea.nu/2010/03/22/howto-create-new-debian-domu-using-xen-on-bsd/</link>
      <pubDate>Mon, 22 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/03/22/howto-create-new-debian-domu-using-xen-on-bsd/</guid>
      <description>In this tutorial you&amp;rsquo;ll get detailed information how to setup a fully functionable Debian Lenny system using virtualization software Xen. This entry was written due to high frustration caused by unreliable/outdated articles on the Internet and uncompleted tutorials. This here should be an attempt to describe the installation process completely and provide additional information which might help you solve common problems. The domU system we&amp;rsquo;d like to setup (in our case Debian) provides a neat netboot installer which supports Xen.</description>
    </item>
    
    <item>
      <title>HowTo: Qemu networking on NetBSD</title>
      <link>http://blog.dornea.nu/2010/03/01/howto-qemu-networking-on-netbsd/</link>
      <pubDate>Mon, 01 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2010/03/01/howto-qemu-networking-on-netbsd/</guid>
      <description>In this tutorial I&amp;rsquo;d like to give you some useful examples how to configure network when using Qemu as virtualization machine. The videos in this HowTo were taken on a NetBSD-5_STABLE/amd64 machine using Qemu 0.11.1. **Attention: **On my system I&amp;rsquo;ve used a patched version of Qemu as reported here. However you can use the fd= option to specify an open socket to be used. Example:
$ qemu -cdrom [iso file] -net nic -net tap,fd=3 3&amp;lt;&amp;gt;/dev/tap0 Using this example `tap0″ should be created before the qemu command.</description>
    </item>
    
    <item>
      <title>NetBSD, Linux, Xen - Does it work?</title>
      <link>http://blog.dornea.nu/2009/11/14/netbsd-linux-xen-does-it-work/</link>
      <pubDate>Sat, 14 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/11/14/netbsd-linux-xen-does-it-work/</guid>
      <description>In this article I&amp;rsquo;d like to share my impressions I made with Xen during the last weeks. I met Xen a few months ago but due to general lack of interest I didn&amp;rsquo;t have the chance to give it a try.Para-virtualization - why bother at all? There were actually no significant reasons why I should use virtualization. But then it started with this thread, followed by this one. The really fascinating - and tough quite useful - aspect of virtualization consists of the hardware access policy which is implemented by the virtualization host.</description>
    </item>
    
    <item>
      <title>HowTo: SSH-Tunnel over CorkScrew using Tor</title>
      <link>http://blog.dornea.nu/2009/08/05/howto-ssh-tunnel-over-corkscrew-using-tor/</link>
      <pubDate>Wed, 05 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/08/05/howto-ssh-tunnel-over-corkscrew-using-tor/</guid>
      <description>Nowadays it seems like we&amp;rsquo;re loosing our privacy and are being taped by video cameras all over. The same applies to Internet surveillance: By daily traffic analysis you can find out who is talking to whom over a public network. This traffic allows others to track your click behaviour and interests. So if any mailicious guy has access to your network traffic (@work, @home …) he will try to find more information about you, like e.</description>
    </item>
    
    <item>
      <title>HowTo: RsynCrypto - The backup jewel</title>
      <link>http://blog.dornea.nu/2009/06/25/howto-rsyncrypto-the-backup-jewel/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/06/25/howto-rsyncrypto-the-backup-jewel/</guid>
      <description>Nowadays it is essential to backup your data and keep it safe in case of a data loss event. The most common way to backup (private) data is to use a remote server where you can upload your data. Certainly you want to keep it safe and private So how do you want to guarantee the privacy of the files stored? Upload it to the server and encrypt it afterwards?! Somehow you want to automate this backup process so you don&amp;rsquo;t have to do nothing than running the backup script.</description>
    </item>
    
    <item>
      <title>HowTo: Get SETOF from Array in PostgreSQL</title>
      <link>http://blog.dornea.nu/2009/03/30/howto-get-setof-from-array-in-postgresql/</link>
      <pubDate>Mon, 30 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2009/03/30/howto-get-setof-from-array-in-postgresql/</guid>
      <description>The use of so called &amp;ldquo;procedural languages&amp;rdquo; in PostgreSQL allows the user to write user-defined functions in other languages than SQL or C. Since every query is sent to the server, the database server has to know how to interpret and handle function statements. As the PostgreSQL documentation describes, the function handler itself is a C language function compiled into a shared object and loaded on demand. All you have to do is to install the language into your database.</description>
    </item>
    
  </channel>
</rss>
