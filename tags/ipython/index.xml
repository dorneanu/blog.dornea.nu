<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ipython on blog.dornea.nu</title><link>http://blog.dornea.nu/tags/ipython/</link><description>Recent content in ipython on blog.dornea.nu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/ipython/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenVPN for paranoids</title><link>http://blog.dornea.nu/2015/11/17/openvpn-for-paranoids/</link><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/11/17/openvpn-for-paranoids/</guid><description>Continuing my admin series this time I&amp;rsquo;d like to setup a VPN using OpenVPN as user-based VPN solution. Unlike IPSec solutions which require IPSec on both (server and client) sides, securing the VPN tunnel by OpenSSL is a more preferable option.
In this post I&amp;rsquo;ll try to show which steps have to be taken in order to:
secure the communication channel use up-to-date (and secure!) TLS configurations prevent information leaks when the VPN tunnel is down At least for the last one some additional steps are required to route your traffic only through the VPN tunnel.</description></item><item><title>Advanced inter VLAN switching using Cisco</title><link>http://blog.dornea.nu/2015/11/06/advanced-inter-vlan-switching-using-cisco/</link><pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/11/06/advanced-inter-vlan-switching-using-cisco/</guid><description>Continuing my CCNA journey I&amp;rsquo;d like to address inter VLAN switching in a more detailed way. In this post I&amp;rsquo;ll configure my previous topology to use VTP and let STP prevent frame looping and other &amp;ldquo;anomalies&amp;rdquo; on Layer 2.
Updated network topology %%blockdiag # &amp;lt;!-- collapse=True --&amp;gt; diagram admin {â†” PC1 [shape = &amp;#34;cisco.pc&amp;#34;]; PC2 [shape = &amp;#34;cisco.pc&amp;#34;]; PC3 [shape = &amp;#34;cisco.pc&amp;#34;]; PC4 [shape = &amp;#34;cisco.pc&amp;#34;]; PC5 [shape = &amp;#34;cisco.pc&amp;#34;]; PC6 [shape = &amp;#34;cisco.</description></item><item><title>Basic Layer 2 Switching using Cisco Packet Tracer</title><link>http://blog.dornea.nu/2015/10/21/basic-layer-2-switching-using-cisco-packet-tracer/</link><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/10/21/basic-layer-2-switching-using-cisco-packet-tracer/</guid><description>As a pseudo-preparation for my CCNA exam I wanted to sum up some of the basic configuration steps related to Cisco switches. Although I won&amp;rsquo;t handle every topic related to Layer 2, I will assume you have already some network knowledge. The main reason for this post is to show how to setup a really small network infrastructure and configure its components. For my purposes I have used Cisco&amp;rsquo;s Packet Tracer to simulate the network which I highly recommend.</description></item><item><title>Manage PKI using OpenSSL</title><link>http://blog.dornea.nu/2015/10/02/manage-pki-using-openssl/</link><pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/10/02/manage-pki-using-openssl/</guid><description>In the previous X.509 related post I&amp;rsquo;ve had a look at the internals of a X.509 certficate. This time I want to setup my own PKI using some open source software. This post is a preparation for setting up a VPN using OpenVPN.
Before implementing the PKI let&amp;rsquo;s have a look what a PKI should definitely include (make sure you have a look at the Wikipedia entry):
certificate authority (CA) has a public and a private key used to digitally sign certificates registration authority (RA) verify identify of users requesting information from the CA certificate management system probably the most important component Revision CA types There are several types of CAs:</description></item><item><title>Debugging Android native shared libraries</title><link>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</link><pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/07/01/debugging-android-native-shared-libraries/</guid><description>Since I haven&amp;rsquo;t done this before, I thought I could share some experiences with you. All this began during some APK analysis which was heavily using JNIs. In my particular case Java Native Interfaces were used to call functions inside libraries written in C/C++. At that time I was quite unfamiliar with JNIs and how they actually work. Besides that I haven&amp;rsquo;t debugged any native applications/libraries on Android before. So this was the perfect opportunity to have a closer look at Android NDK and its debugging features.</description></item><item><title>Validating and pinning X.509 certificates</title><link>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</link><pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/05/24/validating-and-pinning-x.509-certificates/</guid><description>In times of NSA, surveillance and data privacy, protecting your data has become an essential part of your every day life. A good understanding of basic principles is half the battle. In this post I just wanted to have look at SSL/TLS from a developer point of view but also from an users one. On the one hand I wanted to use openssl as a CLI utility to inspect and validate X.</description></item><item><title>usd AG Hacker challenge 2015 - Solutions</title><link>http://blog.dornea.nu/2015/03/18/usd-ag-hacker-challenge-2015-solutions/</link><pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/03/18/usd-ag-hacker-challenge-2015-solutions/</guid><description>usd AG has announced a hacking challenge I have participated at. The target system was available at http://82.195.79.41/. Now let me sum up thg steps that have been required in order to get all 6 tokens.
# &amp;lt;!-- collapse=True --&amp;gt; import pandas as pd import sqlite3 import binascii Scratch the surface Let&amp;rsquo;s first conduct a nmap scan to see which ports are open.
%%bash nmap -A -T4 82.195.79.41 Starting Nmap 6.</description></item><item><title>HowTo: Androguard with Docker</title><link>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</link><pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/09/12/howto-androguard-with-docker/</guid><description>Meanwhile I think I&amp;rsquo;ve felt in love with Androguard. I love its Pythonic way handling things and its visualizations features. As many of you have noticed, you can run Androguard inside a Docker container. I&amp;rsquo;ve never used Docker before so it was about time. You can find some general information about the installation process on Arch Linux at this address.
Extensions # Install extensions # &amp;lt;!-- collapse=True --&amp;gt; %install_ext https://raw.githubusercontent.com/dorneanu/ipython/master/extensions/diagmagic.py # Then load extensions %load_ext diagmagic Installed diagmagic.</description></item><item><title>Using JQuery DataTables with IPython</title><link>http://blog.dornea.nu/2014/08/28/using-jquery-datatables-with-ipython/</link><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/08/28/using-jquery-datatables-with-ipython/</guid><description>I thought this might be interesting enough to share with you. Every time I&amp;rsquo;m working with DataFrames I somehow miss the search feature: I&amp;rsquo;d like to search for certain patterns inside the columns and rows. I used to use JQuery DataTables for netgrafio. But I couldn&amp;rsquo;t find any simple way to integrate it with IPython. Well it was easier than I thought.
Extensions # &amp;lt;!-- collapse=True --&amp;gt; from IPython import display from IPython.</description></item><item><title>Python for Data Analysis</title><link>http://blog.dornea.nu/2014/08/06/python-for-data-analysis/</link><pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/08/06/python-for-data-analysis/</guid><description>I use Python on daily basis. I love IPython and use it as my main shell for every day tasks. So it was a matter of time until I got captivated by panda, scipy and numpy. I&amp;rsquo;ve ordered myself Python for Data Analysis in order to get more familiar with the mentioned libraries. Before that I used to semi-understand how their work and got used to that copy&amp;amp;paste mentality.
This book is not only about data analysis.</description></item><item><title>Web Application Survey Tutorial</title><link>http://blog.dornea.nu/2014/08/06/web-application-survey-tutorial/</link><pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/08/06/web-application-survey-tutorial/</guid><description>Suppose you get a list of some URLs and you are asked to &amp;ldquo;investigate&amp;rdquo; them. The list is full of some random URLs related to your company and nobody knows about. You don&amp;rsquo;t have a clue who is responsible for them nor which applications (if any) are running behind them. Sounds like a cool task, ugh?
Well in today&amp;rsquo;s post I&amp;rsquo;ll show you how I&amp;rsquo;ve managed it to minimize the process of analyzing each URL manually and saved me a lot of time automatizing things.</description></item><item><title>Android Dynamic Code Analysis - Mastering DroidBox</title><link>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</link><pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/08/05/android-dynamic-code-analysis-mastering-droidbox/</guid><description>In this article I&amp;rsquo;ll have a a closer look at DroidBox which provides a mobile sandbox to look at Android applications. In the previous post I&amp;rsquo;ve dealt with static code analysis. This time will start running our malicious application and look at the &amp;ldquo;noise&amp;rdquo; it generates. That would be:
file system access network activity interaction with the operating system interaction with other applications etc. DroidBox is very easy to use and consists of an own system image and kernel meant to log one applications activities.</description></item><item><title>Disect Android APKs like a Pro - Static code analysis</title><link>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</link><pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/07/07/disect-android-apks-like-a-pro-static-code-analysis/</guid><description>I&amp;rsquo;ve started writing this IPython notebook in order to make myself more comfortable with Android and its SDK. Due to some personal interests I thought I could also have a look at the available RE tools and learn more about their pros &amp;amp; cos. In particular I had a closer look at AndroGuard which seems to be good at:
Reverse engineering, Malware and goodware analysis of Android applications &amp;hellip; and more (ninja !</description></item><item><title>Migrate this blog from Octopress to Pelican</title><link>http://blog.dornea.nu/2014/06/18/migrate-this-blog-from-octopress-to-pelican/</link><pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/06/18/migrate-this-blog-from-octopress-to-pelican/</guid><description>A few weeks ago I&amp;rsquo;be migrated my whole blog from Wordpress to Octopress. Meanwhile I&amp;rsquo;ve discovered Pelican which is the Pythonic alternative to Octopress. To be honest: The main reason I&amp;rsquo;m using Pelican instead of Octopress is the ability to import/include IPython notebooks.
After I&amp;rsquo;ve set up my blog using Octopress I only had a bunge of Markdown files. So let&amp;rsquo;s get started.
Generate metadata for content %%bash cp ~/work/blog/octopress/source/_posts/*.markdown ~/work/blog/pelican/content/markdown/ %%bash ls -c ~/work/blog/pelican/content/markdown/ | head -n 10 2014-05-27-berlinsides-0x05.</description></item><item><title>24h Android sniffing using tcpdump - IPython Notebook Version</title><link>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</link><pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2014/01/23/24h-android-sniffing-using-tcpdump-ipython-notebook-version/</guid><description>Motivation I&amp;rsquo;ve started this little project since I was mainly interested in the data my smartphone is sending all the time without my knowledge. I have a bunch of apps installed on my phone and I have absolutely no ideea which (kind of) data is beeing transfered to the Internet all day long. I thought I&amp;rsquo;d be a great ideea to monitor/sniff my data interface (3G, Edge etc. NOT Wifi) for 24h during my normal daily phone usage.</description></item></channel></rss>