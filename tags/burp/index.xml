<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>burp on blog.dornea.nu</title>
    <link>http://blog.dornea.nu/tags/burp/</link>
    <description>Recent content in burp on blog.dornea.nu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Aug 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/burp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatic file uploads</title>
      <link>http://blog.dornea.nu/2016/08/26/automatic-file-uploads/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2016/08/26/automatic-file-uploads/</guid>
      <description>Uploading files in web applications iw nowadays a common feature. Being able to automate this steps using Burp, Curl, Python &amp;amp; Co. doesn&amp;rsquo;t seem to be an easy task. Basically the automation involves following steps:
 for a given directory of files, repeat the request for each file have a look for the status responses to detect anomalies  In Burp you&amp;rsquo;re allowed to copy a certain request as curl command which simplifies things.</description>
    </item>
    
    <item>
      <title>Decode Adobe Flex AMF protocol </title>
      <link>http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2015/06/22/decode-adobe-flex-amf-protocol/</guid>
      <description>If you ever had the opportunity to pentest Flash applications you might have had problems analyzing the traffic between the client and the backend. An increasing number of (web) applications is using Adobe Flex at the presentation layer which uses the ActionScript Message Format (AMF) to send data back and forth. One might think that Burp has already built-in decoding functionalities for AMF. Although this is the case I found Burp&amp;rsquo;s decoding to be more confusing than useful.</description>
    </item>
    
    <item>
      <title>Import Burp cert into Android</title>
      <link>http://blog.dornea.nu/2014/12/03/import-burp-cert-into-android/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/03/import-burp-cert-into-android/</guid>
      <description>As already mentioned in previous posts, in order to install Burps CA certificate, just go to the IP address Burp is listening on, followed by /cert, e.g. http://127.0.0.1:8080/cert. There you can download the cert and push it to your Android device. Usually you&amp;rsquo;ll get a binary certificate in DER format: cacert.crt.
Android won&amp;rsquo;t recognize this file as a cert. You&amp;rsquo;ll have to rename it to: cacert.der and push it to your device:</description>
    </item>
    
    <item>
      <title>HowTo: Proxy Non-Proxy-Aware Android Applications through Burp</title>
      <link>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/12/02/howto-proxy-non-proxy-aware-android-applications-through-burp/</guid>
      <description>Proxying HTTP(s) traffic from Android devices through Burp should be actually no magic. Nevertheless you&amp;rsquo;ll have to take some important steps into consideration:
  Install Burps CA cert on the device
 I usually access Burp directly and download the cert file (cacert.crt) If Burp is listening on 192.168.1.1:8080, just go to http://192.168.1.1:8080/cert to download the cert Push this file to your device and install the certificate    Install ProxyDroid on Android</description>
    </item>
    
    <item>
      <title>Links of the Week #27</title>
      <link>http://blog.dornea.nu/2014/02/14/links-of-the-week-#27/</link>
      <pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2014/02/14/links-of-the-week-#27/</guid>
      <description>  When Random Isnâ€™t Random Enough: Lessons from an Online Poker Exploit
  Technical Details Behind a 400Gbps NTP Amplification DDoS Attack
  Absolute Computatrace revisited
  Burp Co2
  Porting Applications to 64bit ARM
  Price and Feature Comparison of Web Application Scanners
  GoLismero 2.0 Beta 3
  vulnhub.com
  faces.io
  </description>
    </item>
    
    <item>
      <title>HowTo: Automate Burp using Burp Extender API</title>
      <link>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.dornea.nu/2013/08/02/howto-automate-burp-using-burp-extender-api/</guid>
      <description>I really love Burp. Since I use it on a daily basis I thought there might be some way to automate it. Usually I mainly do these steps to scan some URL:
 Define scope Start manual exploring OR spider the URL in order to get some target map Activate passive scanning Activate live scanning Wait to the scan to finish Have a look at the results Save/export the results  Well these are a lot of steps which have to be done manually.</description>
    </item>
    
  </channel>
</rss>
