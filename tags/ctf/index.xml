<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ctf on blog.dornea.nu</title><link>http://blog.dornea.nu/tags/ctf/</link><description>Recent content in ctf on blog.dornea.nu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 09 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.dornea.nu/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>ringzer0 CTF - Binaries - Introduction to MIPS</title><link>http://blog.dornea.nu/2016/12/09/ringzer0-ctf-binaries-introduction-to-mips/</link><pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/12/09/ringzer0-ctf-binaries-introduction-to-mips/</guid><description>References https://www.cr0.org/paper/mips.elf.external.resolution.txt http://logos.cs.uic.edu/366/notes/mips%20quick%20tutorial.htm</description></item><item><title>ringzer0 CTF - Binaries - Heap Allocator</title><link>http://blog.dornea.nu/2016/11/30/ringzer0-ctf-binaries-heap-allocator/</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/11/30/ringzer0-ctf-binaries-heap-allocator/</guid><description>First let&amp;rsquo;s collect some information about the binary itself:
$ readelf IntelligenSoftware -h ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2&amp;#39;s complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x400688 Start of program headers: 64 (bytes into file) Start of section headers: 4608 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 9 Size of section headers: 64 (bytes) Number of section headers: 30 Section header string table index: 27 Let&amp;rsquo;s see some code:</description></item><item><title>ringzer0 CTF - Binaries - Time to learn x86 ASM and gdb</title><link>http://blog.dornea.nu/2016/11/29/ringzer0-ctf-binaries-time-to-learn-x86-asm-and-gdb/</link><pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/11/29/ringzer0-ctf-binaries-time-to-learn-x86-asm-and-gdb/</guid><description>This one was a quite easy one. Using radare let&amp;rsquo;s find more information about the binary:
$ r2 -AA 88eb31060c4abd0931878bf7d2dd8c1a [0x08048380]&amp;gt; iI havecode true pic false canary false nx true crypto false va true intrp /lib/ld-linux.so.2 bintype elf class ELF32 lang c arch x86 bits 32 machine Intel 80386 os linux minopsz 1 maxopsz 16 pcalign 0 subsys linux endian little stripped false static false linenum true lsyms true relocs true rpath NONE binsz 7450 Ok, now let&amp;rsquo;s have a look at the entry point:</description></item><item><title>ringzer0 CTF - SysAdmin Linux</title><link>http://blog.dornea.nu/2016/10/30/ringzer0-ctf-sysadmin-linux/</link><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/10/30/ringzer0-ctf-sysadmin-linux/</guid><description>SysAdmin Part 1 Let&amp;rsquo;s login to the machine:
$ sshpass -p VNZDDLq2x9qXCzVdABbR1HOtz ssh morpheus@for01.ringzer0team.com -p 13375 _ ____ __ _____(_)___ ____ _____ ___ _____/ __ \/ /____ ____ _____ ___ / ___/ / __ \/ __ `/_ / / _ \/ ___/ / / / __/ _ \/ __ `/ __ `__ \ / / / / / / / /_/ / / /_/ __/ / / /_/ / /_/ __/ /_/ / / / / / / /_/ /_/_/ /_/\__, / /___/\___/_/ \____/\__/\___/\__,_/_/ /_/ /_/ /____/ _ _ ___ _____ ___ ___ _ _ | (_)_ _ ___ / __|_ _| __| / _ \ &amp;#39; \| | | &amp;#39; \/ -_) | (__ | | | _| \___/_||_|_|_|_||_\___| \___| |_| |_| You have mail.</description></item><item><title>ringzer0 CTF - JavaScript challenges</title><link>http://blog.dornea.nu/2016/10/29/ringzer0-ctf-javascript-challenges/</link><pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/10/29/ringzer0-ctf-javascript-challenges/</guid><description>These challenges were quite tricky since they didn&amp;rsquo;t focus only on the JavaScript language itself but also on all kind of stuff you can do with JavaScript: Crypto, obfuscation etc. I think they were a good opportunity to learn more about the language itself and get some ideas how JavaScript obfuscation techniques work.
Level 1: Client side validation is bad! Let&amp;rsquo;s have a look at the source code:
// Look&amp;#39;s like weak JavaScript auth script :) $(&amp;#34;.</description></item><item><title>ringzer0 CTF - Jail Escaping C</title><link>http://blog.dornea.nu/2016/09/19/ringzer0-ctf-jail-escaping-c/</link><pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/09/19/ringzer0-ctf-jail-escaping-c/</guid><description>Here are my solutions for the ringzer0 Jail Escaping C challenges:
Level 1: https://ringzer0team.com/challenges/228 Level 2: https://ringzer0team.com/challenges/229 Level 3: https://ringzer0team.com/challenges/230 Level 1 level1@ringzer0team.com&amp;#39;s password: Last login: Sun Apr 24 05:48:42 2016 from RingZer0 Team Online CTF C Jail Level 1: Current user is uid=1000(level1) gid=1000(level1) groups=1000(level1) Flag is located at /home/level1/flag.txt Challenge instruction: ----------------------------- Type DONE to compile and execute your binary. Your payload will be compiled that way: gcc -O3 -Wall -fstack-protector-all -fPIE bin.</description></item><item><title>Testing shellcodes</title><link>http://blog.dornea.nu/2016/08/23/testing-shellcodes/</link><pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/08/23/testing-shellcodes/</guid><description>While playing some wargames where I had to read a file called flag.txt using C code, one possible solution (unfortunately not the right one) was to use shellcodes to read the file and dump its content. Here are my notes for future use.
BITS 64 ; Author Mr.Un1k0d3r - RingZer0 Team ; Read /etc/passwd Linux x86_64 Shellcode ; Shellcode size 82 bytes global _start section .text _start: jmp _push_filename _readfile: ; syscall open file pop rdi ; pop path value ; NULL byte fix xor byte [rdi + 11], 0x41 xor rax, rax add al, 2 xor rsi, rsi ; set O_RDONLY flag syscall ; syscall read file sub sp, 0xfff lea rsi, [rsp] mov rdi, rax xor rdx, rdx mov dx, 0xfff; size to read xor rax, rax syscall ; syscall write to stdout xor rdi, rdi add dil, 1 ; set stdout fd = 1 mov rdx, rax xor rax, rax add al, 1 syscall ; syscall exit xor rax, rax add al, 60 syscall _push_filename: call _readfile path: db &amp;#34;flag.</description></item><item><title>ringzer0 CTF - Jail Escaping Bash</title><link>http://blog.dornea.nu/2016/06/20/ringzer0-ctf-jail-escaping-bash/</link><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/06/20/ringzer0-ctf-jail-escaping-bash/</guid><description>Here are my solutions for the ringzer0 Jail Escaping shell challenges.
Level1 evel1@ringzer0team.com&amp;#39;s password: RingZer0 Team Online CTF BASH Jail Level 1: Current user is uid=1000(level1) gid=1000(level1) groups=1000(level1) Flag is located at /home/level1/flag.txt Challenge bash code: ----------------------------- while : do echo &amp;#34;Your input:&amp;#34; read input output=`$input` done ----------------------------- You can spawn a shell using:
/bin/bash Although you can&amp;rsquo;t read (you could redirect stdout to stderr) files, you can try to run commands based on the file content:</description></item><item><title>ringzer0 CTF - Jail Escaping PHP</title><link>http://blog.dornea.nu/2016/06/20/ringzer0-ctf-jail-escaping-php/</link><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2016/06/20/ringzer0-ctf-jail-escaping-php/</guid><description>Here are my solutions for the ringzer0 Jail Escaping PHP challenges.
Level 1 RingZer0 Team Online CTF PHP Jail Level 1: Current user is uid=1000(level1) gid=1000(level1) groups=1000(level1) Flag is located at /home/level1/flag.txt Challenge PHP code: ----------------------------- &amp;lt;?php array_shift($_SERVER[&amp;#39;argv&amp;#39;]); $var = implode(&amp;#34; &amp;#34;, $_SERVER[&amp;#39;argv&amp;#39;]); if($var == null) die(&amp;#34;PHP Jail need an argument\n&amp;#34;); function filter($var) { if(preg_match(&amp;#39;/(`|open|exec|pass|system|\$|\/)/i&amp;#39;, $var)) { return false; } return true; } if(filter($var)) { eval($var); echo &amp;#34;Command executed&amp;#34;; } else { echo &amp;#34;Restricted characters has been used&amp;#34;; } echo &amp;#34;\n&amp;#34;; ?</description></item><item><title>usd AG Hacker challenge 2015 - Solutions</title><link>http://blog.dornea.nu/2015/03/18/usd-ag-hacker-challenge-2015-solutions/</link><pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate><guid>http://blog.dornea.nu/2015/03/18/usd-ag-hacker-challenge-2015-solutions/</guid><description>usd AG has announced a hacking challenge I have participated at. The target system was available at http://82.195.79.41/. Now let me sum up thg steps that have been required in order to get all 6 tokens.
# &amp;lt;!-- collapse=True --&amp;gt; import pandas as pd import sqlite3 import binascii Scratch the surface Let&amp;rsquo;s first conduct a nmap scan to see which ports are open.
%%bash nmap -A -T4 82.195.79.41 Starting Nmap 6.</description></item></channel></rss>